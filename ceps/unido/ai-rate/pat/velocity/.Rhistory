writeLines(all, paste0(tolower(j), ".html"))
}
}
}
}
}
View(df)
options(stringsAsFactors=FALSE)
library(dplyr)
library(stringr)
library(data.table)
library(EconGeo)
library(jsonlite)
source ("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/rescale.R")
#test complexity
# create employment counts for all NL
comp = NULL
for (i in c("east-nl", "west-nl", "north-nl", "south-nl")){
setwd(paste0("~/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/1-data/ind/", i))
df = read.csv ("lisa-2017-2022.csv")
comp= rbind (comp, df)
}
comp = subset (comp, comp$jaar==2022)
comp = comp[, c("coropnaam", "SBI08_3_omschr", "banen")]
comp$banen = ave(comp$banen, paste0(comp$coropnaam, comp$SBI08_3_omschr), FUN = sum)
comp = unique (comp)
comp = get_matrix(comp)
comp = rca (comp, binary = T)
comp = data.frame (sbi3 = colnames (comp),
comp = rescale(tci (comp)))
# works better at the muni level than at the nuts3 level
# create employment counts for all NL
sbi = NULL
for (i in c("east-nl", "west-nl", "north-nl", "south-nl")){
setwd(paste0("~/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/1-data/ind/", i))
df = read.csv ("lisa-2017-2022.csv")
df = df[, c("sbi08_3", "banen", "jaar")]
df$sbi3 = df$sbi08_3
df$sbi.emp = ave(df$banen, paste0(df$jaar, df$sbi08_3), FUN = sum)
df = unique (df[, c("sbi3", "sbi.emp", "jaar")])
sbi= rbind (sbi, df)
}
sbi$sbi.emp = ave(sbi$sbi.emp, paste0(sbi$jaar, sbi$sbi3), FUN = sum)
sbi=unique (sbi)
sbi$sum = ave(sbi$sbi.emp, sbi$jaar, FUN = sum)
sbi$sbi.share = round((100*sbi$sbi.emp)/sbi$sum, 4)
sbi$sum = NULL
sbi = unique (sbi)
test = subset (sbi, sbi$jaar==2022)
sum(test$sbi.emp)
sum(test$sbi.share)
# add sectors in which a region has 0 emnployment
addreg = NULL
for (i in c("east-nl", "west-nl", "north-nl", "south-nl")){
setwd(paste0("~/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/1-data/ind/", i))
df = read.csv ("lisa-2017-2022.csv")
addreg= rbind (addreg, df)
}
addreg1 = unique (addreg[, c("provnaam", "provcode",
"coropcode", "coropnaam")])
addreg2 = unique(addreg[, c("afdeling", "afdeling_omschr",
"sbi08_3", "SBI08_3_omschr",
"sbi08","SBI08_omschr")])
addreg3 = merge (addreg1, addreg2)
addreg3$vest = 0
addreg3$banen = 0
addreg3$jaar = 2022
addreg4 = addreg3
addreg4$jaar = 2017
addreg = rbind (addreg3, addreg4)
# selectors
i = "east-nl"
i = "west-nl"
i = "south-nl"
# for nuts1
reg= "nuts2"
for (reg in c("nuts2", "nuts1")){
year = 2022
for (year in c(2017, 2022)) {
#i = "east-nl"
for (i in c("east-nl", "west-nl", "north-nl", "south-nl")){
# read all lisa files
setwd(paste0("~/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/1-data/ind/", i))
df = read.csv ("lisa-2017-2022.csv")
addreg1 = subset (addreg, addreg$provnaam%in%df$provnaam)
df = rbind (df, addreg1)
if (reg == "nuts1") {
df$provnaam = i
}
length(unique (df$SBI08_3_omschr)) # 261 industries
length(unique (df$provnaam))
length(unique (df$afdeling_omschr))
length(unique (df$provcode))
length(unique (df$coropcode))
length(unique (df$jaar))
unique (df$coropnaam)
# old method
# read amount of employees per sbi3 in 2020
#setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/3-projects/_completed/2022-12-NL-BZK/1-data/_raw")
#sbi = fread("combined data sbi3 muni rest NL.csv")
#sbi = subset (sbi, sbi$year == 2020)
#sbi$sbi.emp = ave(sbi$employment, sbi$sbi3, FUN = sum)
#sbi = unique(sbi[, c("sbi3", "sbi.emp")])
#sbi$sbi.share = round((100*sbi$sbi.emp)/sum(sbi$sbi.emp, na.rm = T), 4)
#sbi = sbi[complete.cases(sbi), ]
# we seem to just be missing 61, 62, 142, 353, 613, 652, 990
sbi2 = subset (sbi, sbi$jaar==year)
sbi2$jaar = NULL
df = merge (df, sbi2, by.x = "sbi08_3", by.y = "sbi3")#new merge
df = df[complete.cases(df), ]
df = subset (df, df$jaar==year)
df$reg.emp = ave(df$banen, df$provnaam, FUN = sum)
df$reg.banen = ave(df$banen, paste0(df$provnaam, df$sbi08_3), FUN = sum)
df$share.sbi.reg = round(100*df$reg.banen/df$reg.emp, 4)
df$rca = round(df$share.sbi.reg/df$sbi.share, 3)
# rca matrix
rca.m = get_matrix(unique(df[, c("provnaam", "sbi08_3", "rca")]))
rca.m[is.na(rca.m)] <- 0
rca.m[rca.m>1]=1
rca.m[rca.m<1]=0
# need rest NL?
# rel
# compute relatedness density
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/3-projects/_completed/2022-12-NL-BZK/2-analysis")
rel = get_list(as.matrix (read.csv2("1-ind-ind-relatedness-3d-2019.csv",
header = T, row.names = 1, check.names = F)))
# merge with ind att to get actual names
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/3-projects/_completed/2022-12-NL-BZK/1-data")
att = fread("nace-att.csv")
att = unique (att[, c("sbi_3d", "description_3d")])
rel = merge (rel, att, by.x = "Region", by.y = "description_3d")
colnames (rel) = c("Region", "Industry", "Count","from")
rel = merge (rel, att, by.x = "Industry", by.y = "description_3d")
colnames (rel) = c("Region", "Industry", "Count","from", "to")
rel1 = rel # save a version for comp
rel = get_matrix(rel[, c("from", "to", "Count")]) # old version
# load the skill relatedness one
setwd("~/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/1-data/ind")
rel2 = read.csv ("industry_flows_3d_1019.csv")[, c("sbi3d_o", "sbi3d_d", "inter_flow_1819")]
rel2 = rel2[complete.cases(rel2),]
rel2 = get_matrix(rel2)
rel2 = round(relatedness(rel2, method = "cosine"),4)
rel2[rel2 == Inf] = 0
rel2 = get_list(rel2)
rel1 = merge (rel1, rel2, by.x = c("from", "to"), by.y = c("Region", "Industry"))
rel1 = rel1[complete.cases(rel1),]
cor(rel1$Count.x, rel1$Count.y)
sum(rel1$Count.y==0)/length(rel1$Count.y)
# NEW HERE
#rel = get_matrix(rel1[, c("from", "to", "Count.y")]) # REL1 # NEW FOR RON
# NEW HERE
# confirmity
rel = rel[, colnames(rel)%in%colnames(rca.m)]
rel = rel[rownames(rel)%in%colnames(rca.m), ]
rca.m = rca.m[, colnames(rca.m)%in%colnames(rel)]
#rel[is.na(rel)] <- 0
## traditional relatedness density
reldens = relatedness_density (rca.m, rel)
reldens = get_list (reldens)
colnames (reldens) = c("provnaam", "sbi08_3", "reldens")
if (reg == "nuts1") {
reldens$provnaam = i
}
df = merge (df, reldens, by = c("provnaam", "sbi08_3"), all = T)
# complexity
#setwd(paste0(dir, "/_archive/_archive/_archive rea old/2-analysis"))
# old rea data
test = read.csv2("1-municipality-industry-employment-2019.csv", header = T, row.names = 1, check.names = F)
setwd(paste0("~/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/1-data/ind"))
comp = as.matrix (read.csv2("1-municipality-industry-employment-2019.csv", header = T, row.names = 1, check.names = F))
comp = rca (comp, binary = T)
comp = data.frame (sbi3 = colnames (comp),
comp = rescale(tci (comp)))
comp = merge (comp, att, by.x = "sbi3", by.y = "description_3d")
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/2-analysis/ind")
write.csv2(comp, "complexity-ron.csv", row.names = F)
setwd(paste0("~/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/1-data/ind"))
df = merge (df, comp, by.x = "sbi08_3", by.y = "sbi_3d")
# names
# merge with ind att to get actual names
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/1-data/ind")
parent <- unique(fromJSON("parent-data.json")[, c("parent", "id", "color")])
#write.csv2(parent, "parent-ron.csv", row.names = F)
df = merge (df, parent, by.x = "sbi3", by.y = "id", all = T)
df$parent[df$sbi08_3 == 120] = "Manufacturing"
df$parent[df$sbi08_3 == 142] = "Manufacturing"
df$parent[df$sbi08_3 == 143] = "Manufacturing"
df$parent[df$sbi08_3 == 206] = "Manufacturing"
df$parent[df$sbi08_3 == 22] = "Primary"
df$parent[df$sbi08_3 == 254] = "Manufacturing"
df$parent[df$sbi08_3 == 266] = "Manufacturing"
df$parent[df$sbi08_3 == 272] = "Manufacturing"
df$parent[df$sbi08_3 == 352] = "Manufacturing"
df$parent[df$sbi08_3 == 61] = "Primary"
df$parent[df$sbi08_3 == 62] = "Primary"
df$parent[df$sbi08_3 == 652] = "Service 2"
df$parent[df$sbi08_3 == 613] = "Service 2"
df$parent[df$sbi08_3 == 81] = "Primary"
df$parent[df$sbi08_3 == 843] = "Government/NGOs"
df$parent[df$sbi08_3 == 99] = "Primary"
df$parent[df$sbi08_3 == 990] = "Government/NGOs"
df$color[df$parent == "Government/NGOs"] = "Red"
df$color[df$parent == "Manufacturing"] = "Black"
df$color[df$parent == "Primary"] = "Green"
df$color[df$parent == "Service 2"] = "Yellow"
df$jaar[is.na(df$jaar)]=year
df$rca[is.na(df$rca)]=0
df$banen[is.na(df$banen)]=0
df$sbi.emp[is.na(df$sbi.emp)]=0
df$sbi.share[is.na(df$sbi.share)]=0
df$reg.emp[is.na(df$reg.emp)]=0
dfmissingparents = subset (df, is.na(df$parent == T))
dfmissingparents = unique (dfmissingparents[, c("sbi08_3", "parent")])
dfmissingparents = unique (df[, c("parent", "color")])
### HERE IS THE ISSUE - ASSIGN PARENT
if (reg == "nuts2") {
setwd(paste0("~/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/2-analysis/ind/", i, "/3-digit"))
write.csv (df, paste0("reg-ind-new", year, ".csv"), row.names = F)
}
if (reg == "nuts1") {
setwd(paste0("~/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/2-analysis/ind/", i, "/3-digit"))
write.csv (df, paste0("reg-ind-nuts1-new", year, ".csv"), row.names = F)
}
# now PRIO
# read top sectors prio
setwd(paste0("~/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/1-data/ind/", i))
top = read.csv2 ("top-sectoren.csv")
if (i == "south-nl"){
top$top[top$Industry ==  72113] = "Water"
top$label.top[top$Industry ==  72113] = "Kennis en advies"
top$top[top$Industry ==  72199] = "Water"
top$label.top[top$Industry ==  72199] = "Kennis en advies"
# add those (duplicate)
top2 = subset (top, Industry == 7112 | Industry == 72192)
top2$top[top2$Industry ==  7112] = "Water"
top2$label.top[top2$Industry ==  7112] = "Kennis en advies"
top2$top[top2$Industry ==  72192] = "Water"
top2$label.top[top2$Industry ==  72192] = "Kennis en advies"
top = rbind (top, top2)
}
top = subset (top, !label.top == "")
top = merge (top, df, by.x = "Industry", by.y = "sbi08")
#top = merge (top, df, by.x = "Industry", by.y = "sbi08_3") # new
top$ID = paste0(top$provnaam, top$label.top, top$top)
top$reldens1 = ave(top$reldens, top$ID, FUN=function(x) mean(x, na.rm=T))
top$reldens2 = (top$reldens * top$banen)
top$reldens2 = ave(top$reldens2, top$ID, FUN = sum)/ave(top$banen, top$ID, FUN = sum)
top$reldens = top$reldens1
top$comp = ave(top$comp, top$ID)
top$rca = ave(top$rca, top$ID, FUN=function(x) mean(x, na.rm=T))
top$parent = top$top
top$sbi3 = top$label.top
#top$banen = ave(top$banen, top$sbi3, FUN = sum)
top$banen = ave(top$banen, top$ID, FUN = sum)
top = unique (top[, c("provnaam", "parent",
"sbi3", "reldens", "comp", "rca", "banen")])
top$color[top$parent == "Agri & food"] = "darkgreen"
top$color[top$parent == "Life sciences & health"] = "darkred"
top$color[top$parent == "High Tech systems and Materials"] = "darkblue"
top$color[top$parent == "Water"] = "darkorange"
if (reg == "nuts2") {
setwd(paste0("~/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/2-analysis/ind/", i, "/prio"))
write.csv (top, paste0("reg-ind-new", year, ".csv"), row.names = F)
}
if (reg == "nuts1") {
setwd(paste0("~/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/2-analysis/ind/", i, "/prio"))
write.csv (top, paste0("reg-ind-nuts1-new", year, ".csv"), row.names = F)
}
}
}
}
# direclty save json data for treemaps and smart graphs
1+1
# North Netherlands (NL1): Groningen	(NL11),	Friesland	(NL12),	Drenthe	(NL13)
# East Netherlands (NL2):	Overijssel	(NL21), Gelderland (NL22)
# West Netherlands	(NL3):	Flevoland	(NL23), Utrecht	(NL31),	NL32	(North Holland), South Holland	(NL33)
# South Netherlands	(NL4):	North Brabant	(NL41), Limburg	(NL42), Zeeland	(NL34)
# packages
# packages & codes
library(jsonlite)
source ("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/rescale.R")
# html source location
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/3-outputs/deliverable-3/smart/_source")
p1 = paste(readLines("part-1.html"), collapse="\n") #before json data
p3 = paste(readLines("part-3.html"), collapse="\n") #after json data
p3.p = paste(readLines("part-3-prio.html"), collapse="\n") #after json data
# html source location
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/3-outputs/deliverable-3/treemap/_source")
p1.t = paste(readLines("part-1.html"), collapse="\n") #before json data
p3.t = paste(readLines("part-3.html"), collapse="\n") #after json data
pr = "3-digit"
pr = "prio"
for (pr in c("prio", "3-digit")){
reg = "nuts2"
for (reg in c("nuts2", "nuts1")){
# read data
year = 2022
for (year in c(2017, 2022)) {
i = "north-nl"
for (i in c("east-nl", "west-nl", "north-nl", "south-nl")){
setwd(paste0("~/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/2-analysis/ind/", i, "/", pr))
#df = read.csv (paste0("reg-ind-", year, ".csv"))
df = read.csv (paste0("reg-ind-new", year, ".csv"))
df[is.na(df)] <- 0
if (reg == "nuts1") {
setwd(paste0("~/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/2-analysis/ind/", i, "/", pr))
#df = read.csv (paste0("reg-ind-nuts1-", year, ".csv"))
df = read.csv (paste0("reg-ind-nuts1-new", year, ".csv"))
df[is.na(df)] <- 0
}
j = "Overijssel"
j = "Gelderland"
for (j in unique(df$provnaam)){
df2 = subset (df, df$provnaam == j)
df2$id = df2$sbi3
df2$x = df2$reldens
df2$y = df2$comp
df2$value = df2$rca
df2$parent = df2$parent
df2$parent[df2$color == "Green"] = "Landbouw"
df2$parent[df2$color == "Red"] = "Openbaar Bestuur"
df2$parent[df2$color == "Black"] = "Industrie"
df2$parent[df2$color == "Blue"] = "Diensten (Persoonlijke) "
df2$parent[df2$color == "Orange"] = "Utilities"
df2$parent[df2$color == "Purple"] = "Retail"
df2$parent[df2$color == "Yellow"] = "Diensten (Zakelijk, Onderwijs, Gezondheid)"
df2$color = df2$color
df2$count = ave(df2$banen, df2$id, FUN = sum)
df2$share = df2$share.bi.reg
if (is.null(df2$SBI08_3_omschr)){
df2$SBI08_3_omschr = df2$sbi3
}
df2$sbi3 = df2$SBI08_3_omschr
df2 = unique (df2[, c("id", "x", "y", "value", "parent", "color", "count", "rca", "sbi3")])
# convert to JSON
p2 = toJSON(df2)
if (pr== "prio") {
all = paste (p1, p2, p3.p, collapse="\n")
}
if (pr!= "prio") {
all = paste (p1, p2, p3, collapse="\n")
}
setwd(paste0("/Users/pierre-alex/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/3-outputs/deliverable-3/smart/",pr,"/", year, "/", i))
writeLines(all, paste0(tolower(j), ".html"))
df2$value = df2$count
p2 = toJSON(df2)
all = paste (p1.t, p2, p3.t, collapse="\n")
setwd(paste0("/Users/pierre-alex/Dropbox/1-asg/1-production/3-projects/4-dutch-regions/3-outputs/deliverable-3/treemap/",pr,"/", year, "/", i))
writeLines(all, paste0(tolower(j), ".html"))
}
}
}
}
}
# packages & codes
library(jsonlite)
library(dplyr)
library(tidyverse)
# read
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/3-projects/3-unido/1-data/crunchbase")
# packages & codes
library(jsonlite)
library(dplyr)
library(tidyverse)
# read
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/3-projects/3-unido/1-data/pat")
df2 = unique(read.csv ("patnb-prio-epo.csv"))
df2$year = substr(df2$patnb, 3,6)
unique(df2$priority)
sort(unique(df2$priority))
# read crosswalk (priorities)
setwd("~/Dropbox/1-asg/1-production/3-projects/3-unido/1-data/pat")
prio = read.csv("prio.csv", sep = ",", check.names = F)[, c("parent",	"cpc")] # in this case in parent
prio$priority = prio$parent
prio = prio[, c("priority",	"cpc")]
View(prio)
prio = read.csv("prio.csv", sep = ",", check.names = F)[, c("parent",	"cpc")] # in this case in parent
View(prio)
prio = read.csv("prio.csv", sep = ",", check.names = F)
View(prio)
### 1. CONCEPTS CROSSWALK
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/1-data/SCIENCE/OPENALEX/concepts_crosswalk")
# select the AI fields & create full tree
df = read.csv ("concepts.csv")
library(jsonlite)
setwd("~/Dropbox/1-asg/1-production/3-projects/3-unido/3-outputs/ukraine/pat")
df1 = read.csv("ranking-sectors-ukraine.csv")
df1 = df1[, c("sector", "rank")]
colnames (df1) =  c("prio", "rank.pat")
df1$prio[df1$prio == "Chemical engineering"] = "Chemical"
setwd("~/Dropbox/1-asg/1-production/3-projects/3-unido/3-outputs/ukraine/pub")
df2 = read.csv("ranking-sectors-ukraine.csv")
df2 = df2[, c("sector", "rank")]
colnames (df2) =  c("prio", "rank.pub")
setwd("~/Dropbox/1-asg/1-production/3-projects/3-unido/3-outputs/ukraine/vc")
df3 = read.csv("ranking-sectors-ukraine.csv")
df3 = df3[, c("prio", "rank")]
colnames (df3) =  c("prio", "rank.vc")
df3$prio[df3$prio == "Artificial Intelligence"] = "Artificial intelligence"
df = merge (df1, df2, by = "prio", all = T)
df = merge (df, df3, by = "prio", all = T)
# remove ai
df = subset (df, !df$prio=="Artificial intelligence")
df$rank = rank(df$rank.pat+df$rank.pub+df$rank.vc)
# grab the y (ai rate)
dt1 <- fromJSON("https://www.paballand.com/ceps/unido/ai-rate/vc/prio-sectors.json")
dt1 = dt1[, c("prio", "n")]
colnames (dt1) = c("prio", "yvc")
dt2 <- fromJSON("https://www.paballand.com/ceps/unido/ai-rate/pat/prio-sectors.json")
dt2 = dt2[, c("prio", "n")]
colnames (dt2) = c("prio", "ypat")
dt2$prio[dt2$prio == "Chemical engineering"] = "Chemical"
dt3 <- fromJSON("https://www.paballand.com/ceps/unido/ai-rate/pub/prio-sectors.json")
dt3 = dt3[, c("prio", "n")]
colnames (dt3) = c("prio", "ypub")
dt = merge (dt1, dt2, by = "prio", all = T)
dt = merge (dt, dt3, by = "prio", all = T)
dt$rank.y = rank(-(dt$yvc+dt$ypat+dt$ypub))
View(dt)
dt = dt[order(dt$rank.y), ]
View(dt)
write.csv(dt, "rank-olesya.csv", row.names = F)
floor(1)
# packages & codes
library(jsonlite)
library(dplyr)
library(tidyverse)
# read
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/3-projects/3-unido/1-data/pat")
df2 = unique(read.csv ("patnb-prio-epo.csv"))
df2$year = substr(df2$patnb, 3,6)
df = df2
df = subset (df, df$year > 2020) # so 2021-2024
df.ai = subset (df, df$priority == "Artificial intelligence")
df = merge (df, df.ai, by = "patnb", all = T)
df$priority = df$priority.x
df$ai[is.na(df$priority.y) == T] = 0
df$ai[df$priority.y == "Artificial intelligence"] = 1
sum(df$ai)
df = df[, c("patnb", "priority", "ai")]
# count per sector
df$freq = 1
df$count = ave (df$freq, df$priority, FUN = sum)
df$count.ai = df$freq * df$ai
df$count.ai = ave (df$count.ai, df$priority, FUN = sum)
df = unique (df[, c("priority", "count", "count.ai")])
df$share = round(df$count.ai*100/df$count, 2)
df$prio = df$priority
df$n = df$share
df$parent = "Artificial intelligence"
df$color = "#365a94"
df$color = "#8cab79"
df$color = "#237266"
df = df[, c("prio", "n", "parent", "color")]
df = subset (df, !df$prio == "Artificial intelligence")
# do per year
ex <- toJSON(df)
#setwd("~/Dropbox/1-asg/1-production/3-projects/3-unido/3-outputs/crunchbase/bar-chart")
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/ceps/unido/ai-rate/pat")
write(ex, "prio-sectors.json")
###
### NOW AI RATE PER YEAR
###
i = 2020
df3 = NULL
#for (i in seq(2001, 2023, 1)){
for (i in seq(2001, 2021, 1)){
df = subset (df2, df2$year == i) # so 2021-2024
df.ai = subset (df, df$priority == "Artificial intelligence")
df = merge (df, df.ai, by = "patnb", all = T)
df$priority = df$priority.x
df$ai[is.na(df$priority.y) == T] = 0
df$ai[df$priority.y == "Artificial intelligence"] = 1
sum(df$ai)
df = df[, c("patnb", "priority", "ai")]
# count per sector
df$freq = 1
df$count = ave (df$freq, df$priority, FUN = sum)
df$count.ai = df$freq * df$ai
df$count.ai = ave (df$count.ai, df$priority, FUN = sum)
df = unique (df[, c("priority", "count", "count.ai")])
df$share = round(df$count.ai*100/df$count, 2)
df$prio = df$priority
df$n = df$share
df$parent = "Artificial intelligence"
df$color = "#365a94"
df$color = "#8cab79"
df$color = "#237266"
df = df[, c("prio", "n", "parent", "color")]
df = subset (df, !df$prio == "Artificial intelligence")
df$year = i
df3 = rbind (df3, df)
}
# do per year
df3$id = df3$prio
df3$x = df3$year
df3$y = df3$n
df3$label = df3$prio
df3$color = df3$color
df3$parent = df3$id
ex <- toJSON(df3)
#setwd("~/Dropbox/1-asg/1-production/3-projects/3-unido/3-outputs/crunchbase/bar-chart")
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/ceps/unido/ai-rate/pat/velocity")
write(ex, "prio-sectors.json")
i = "Metallurgy"
for (i in (unique (df3$prio))){
sub = subset (df3, df3$prio==i)
ex <- toJSON(sub)
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/ceps/unido/ai-rate/pat/velocity")
write(ex, paste0(tolower(i), ".json"))
}
View(df3)
