1+1
###
### NETWORK GRAPH OF MODELS
###
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/1-data/HUGGING-FACE/viz")
p1 <- paste(readLines("part-1.html"), collapse="\n") #before json data
p3 <- paste(readLines("part-3.html"), collapse="\n") #before json data
source("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/sparse.co.occurrence.chunked.R")
source("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/d3plus-network/d3plus.network.R")
source("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/keep.top.links.R")
library(data.table)
library (EconGeo)
library (jsonlite)
# LOAD HF MODEL LIKE HISTORY
setwd("~/Dropbox/1-asg/1-production/1-data/HUGGING-FACE/testing")
links = fread("likes_2024.csv")[, c("username", "id")]
links2 = links
links2$sum = 1
links2$sum = ave(links2$sum, links2$id, FUN = sum)
#links2 = unique (subset(links2[, c("id", "sum")], links2$sum>600))
links2 = unique (links2[, c("id", "sum")])
links2 = links2[order(-links2$sum), ]
n=50
links2 = links2[1:n, ]
links = subset (links, links$id %in% links2$id)
dir = "/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model/model"
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/1-data/HUGGING-FACE/viz")
p5 <- paste(readLines("graph-part-5.html"), collapse="\n") #before json data
topedges2 = 2
savename = "network-small"
spread_factor <- 20
d3plus.network(links)
links = sparse.co.occurrence.chunked(links)
links = relatedness(links, method = "cosine")
links = get_list(links)
links = subset (links, links$Count>0)
colnames (links) = c("from", "to", "weight")
dir = "/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model/model"
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/1-data/HUGGING-FACE/viz")
p5 <- paste(readLines("graph-part-5.html"), collapse="\n") #before json data
topedges2 = 2
savename = "network-small"
spread_factor <- 20
d3plus.network(links)
colnames (links) = c("from", "to", "weight")
View(links)
if (!exists("nodes")) nodes <- data.frame(id = unique (links$from))
if (!exists("savename")) savename <- "network"
if (!exists("topedges")) topedges <- 2
if (!exists("topedges2")) topedges2 <- 4
if (!exists("spread_factor")) spread_factor <- 4
if (!exists("spread_angle")) spread_angle <- 45
View(nodes)
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/1-data/HUGGING-FACE/viz")
p1 <- paste(readLines("part-1.html"), collapse="\n") #before json data
p3 <- paste(readLines("part-3.html"), collapse="\n") #before json data
library(data.table)
library (EconGeo)
library (jsonlite)
colnames (links) = c("from", "to", "weight")
if (!exists("nodes")) nodes <- data.frame(id = unique (links$from))
if (!exists("savename")) savename <- "network"
if (!exists("topedges")) topedges <- 2
if (!exists("topedges2")) topedges2 <- 4
if (!exists("spread_factor")) spread_factor <- 4
if (!exists("spread_angle")) spread_angle <- 45
library(data.table)
library (EconGeo)
library (jsonlite)
library(igraph)
source("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/keep.top.links.R")
source("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/spread.fr.algo.R")
source("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/layout.networkd3.R")
# html source location
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/d3plus-network/_source")
if (!exists("p1")) p1 <- paste(readLines("graph-part-1.html"), collapse="\n") #before json data
if (!exists("p3")) p3 <- paste(readLines("graph-part-3.html"), collapse="\n") #before json data
if (!exists("p5")) p5 <- paste(readLines("graph-part-5.html"), collapse="\n") #before json data
g <- graph_from_data_frame(links, directed=F, vertices=nodes)
#g <- graph_from_data_frame(links, directed=F)
layout_coords_full <- layout.networkd3(g)
plot(g)
layout_coords_full <- layout.networkd3(g)
E(g)$weight <- -links$weight # Negate the weights to find the maximum spanning tree
mst <- mst(g, weights = E(g)$weight) # Compute the maximum spanning tree
E(mst)$weight <- abs(E(mst)$weight) # Restore the original weights (positive)
# now add top edges
df3 = links[order(-links$weight),]
df3 = df3[1:(length(unique(df3$from))*topedges),]
g <- graph_from_data_frame(df3, directed=F, vertices=nodes)
#combined_graph <- mst
new_edges <- get.edges(g, E(g))
mst <- add_edges(mst, edges = new_edges, attr = edge.attributes(g))
layout_coords <- layout.networkd3(mst)
layout_coords = spread.fr.algo(layout_coords,factor = spread_factor, angle = spread_angle)
# compute x/y
layout_fr <- spread.fr.algo(layout_with_fr(mst), factor = spread_factor, angle = spread_angle) # spread Fruchterman-Reingold layout
V(mst)$x_fr <- layout_fr[,1] # Fruchterman-Reingold layout
V(mst)$y_fr <- layout_fr[,2] # Fruchterman-Reingold layout
V(mst)$x_kk <- layout_with_kk(mst)[,1] # Kamada-Kawai layout
V(mst)$y_kk <- layout_with_kk(mst)[,2] # Kamada-Kawai layout
V(mst)$x_d3 <- layout_coords[,1] # Fruchterman-Reingold layout
V(mst)$y_d3 <- layout_coords[,2] # Fruchterman-Reingold layout
V(mst)$x_d3_full <- layout_coords_full[,1] # Fruchterman-Reingold layout
V(mst)$y_d3_full <- layout_coords_full[,2] # Fruchterman-Reingold layout
# detect communities for colors
V(mst)$parent_louvain = as.factor(membership(cluster_louvain(mst)))
V(mst)$color_louvain <- rainbow(length(unique(membership(cluster_louvain(mst)))))[membership(cluster_louvain(mst))]
# size in the mst network
V(mst)$size_g = closeness(mst)
# replace possible missing node variables
if (is.null(vertex_attr(mst, "size"))) {V(mst)$size <- V(mst)$size_g}
if (is.null(vertex_attr(mst, "parent"))) {V(mst)$parent <- V(mst)$parent_louvain}
if (is.null(vertex_attr(mst, "color"))) {V(mst)$color <- V(mst)$color_louvain}
if (is.null(vertex_attr(mst, "x"))) {V(mst)$x <- V(mst)$x_d3}
if (is.null(vertex_attr(mst, "y"))) {V(mst)$y <- V(mst)$y_d3}
if (is.null(vertex_attr(mst, "related"))) {V(mst)$related <- "No information"}
g = mst
# format to d3plus
V(g)$name2 = V(g)$name
V(g)$index = c(1:length(V(g)$name))
V(g)$name = as.numeric(factor (V(g)$index))-1 # id & links needs to start at 0 in D3plus
#vertex_attr(g) # see all attributes
nodes2 = data.frame(
id = V(g)$name2,
id2 = V(g)$name,
x = V(g)$x,
y = V(g)$y,
color = V(g)$color,
parent = V(g)$parent,
size = V(g)$size,
related = V(g)$related
)
links2 <- as.data.frame(cbind( as_edgelist(g) , round( E(g)$weight, 3 )))
colnames (links2) = c("source", "target", "weight")
links2 = subset (links2, links2$weight>0)
# convert to JSON
p2 = toJSON(nodes2, encoding = "latin-ascii")
p2 = gsub('"x"', 'x', p2) # remove quotes that cause a pb
p2 = gsub('"y"', 'y', p2) # remove quotes that cause a pb
#p5 = gsub(".sizeMax(40)\n", "hola", p5) # remove quotes that cause a pb
p4 = toJSON(links2)
p4 = gsub('"', '', p4) # remove quotes that cause a pb
all = paste (p1, p2, p3, p4, p5, collapse="\n")
# save as d3plus network
setwd(dir)
writeLines(all, paste0(savename, ".html"))
