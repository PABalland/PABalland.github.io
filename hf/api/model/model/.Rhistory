write(toJSON(df2, pretty = TRUE), paste0("stacked-", i, "-top-", n, "-cumulative.json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3, collapse="\n"), paste0("stacked-", i, "-top-", n, "-cumulative.html"))
### -> cum likes pc
df2$y = df2$likes.cum.pc
df2 = df2[complete.cases(df2),]
df2 <- df2[order(df2$color), ] # Ensure data is sorted by 'id' and 'x'
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model")
write(toJSON(df2, pretty = TRUE), paste0("stacked-", i, "-top-", n, "-cumulative-pc.json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3, collapse="\n"), paste0("stacked-", i, "-top-", n, "-cumulative-pc.html"))
i = "library"
#i = "pipeline_tag"
#i = "tag"
#df2 = df
df2 = subset (df, df$month>1)
colnames(df2)[colnames(df2) == "id"] <- "repo"
df2 = merge (df2, top, by = "repo")
df2$author = df2$parent2
df2$model = df2$repo
df2$id = df2[[i]]
df2$id = paste0(df2$id, " (", df2$tag_ab, ")")
df2 = df2[complete.cases(df2),]
df2 = distinct(df2)
df2$x = df2$month
df2$freq = 1
df2 = distinct(df2)
df2$likes = ave(df2$freq, paste0(df2$id,df2$month), FUN = sum)
df2 = df2[, c("id", "x", "likes", "color")]
df2 = distinct(df2)
df2$total = ave(df2$likes, df2$x, FUN = sum)
df2 <- df2[order(df2$id, df2$x), ] # Ensure data is sorted by 'id' and 'x'
df2$likes.cum <- ave(df2$likes, df2$id, FUN = cumsum)
df3 = df2[, c("x", "total")]
df3 = unique (df3)
df3 <- df3[order(df3$x), ] # Ensure data is sorted by 'id' and 'x'
df3$total.cum <- ave(df3$total, FUN = cumsum)
df3$total=NULL
df2 = merge (df2, df3, by = "x")
df2$likes.pc = 100*df2$likes/df2$total
df2$likes.cum.pc = 100*df2$likes.cum/df2$total.cum
### -> likes
df2$y = df2$likes
df2 = df2[complete.cases(df2),]
df2 <- df2[order(df2$color), ] # Ensure data is sorted by 'id' and 'x'
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model")
write(toJSON(df2, pretty = TRUE), paste0("stacked-", i, "-top-", n, ".json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3, collapse="\n"), paste0("stacked-", i, "-top-", n, ".html"))
### -> likes pc
df2$y = df2$likes.pc
df2 = df2[complete.cases(df2),]
df2 <- df2[order(df2$color), ] # Ensure data is sorted by 'id' and 'x'
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model")
write(toJSON(df2, pretty = TRUE), paste0("stacked-", i, "-top-", n, "-pc.json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3, collapse="\n"), paste0("stacked-", i, "-top-", n, "-pc.html"))
### -> cum likes
df2$y = df2$likes.cum
df2 = df2[complete.cases(df2),]
df2 <- df2[order(df2$color), ] # Ensure data is sorted by 'id' and 'x'
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model")
write(toJSON(df2, pretty = TRUE), paste0("stacked-", i, "-top-", n, "-cumulative.json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3, collapse="\n"), paste0("stacked-", i, "-top-", n, "-cumulative.html"))
### -> cum likes pc
df2$y = df2$likes.cum.pc
df2 = df2[complete.cases(df2),]
df2 <- df2[order(df2$color), ] # Ensure data is sorted by 'id' and 'x'
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model")
write(toJSON(df2, pretty = TRUE), paste0("stacked-", i, "-top-", n, "-cumulative-pc.json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3, collapse="\n"), paste0("stacked-", i, "-top-", n, "-cumulative-pc.html"))
setwd("~/Dropbox/1-asg/1-production/1-data/HUGGING-FACE/testing")
setwd("~/Dropbox/1-asg/1-production/1-data/HUGGING-FACE/testing")
df2 = fread("likes_2024.csv")
View(df)
View(df2)
i = "author"
#i = "license"
i = "model"
#i = "library"
#i = "pipeline_tag"
#i = "tag"
#df2 = df
df2 = subset (df, df$month>1)
colnames(df2)[colnames(df2) == "id"] <- "repo"
df2 = merge (df2, top, by = "repo")
df2$author = df2$parent2
df2$model = df2$repo
df2$id = df2[[i]]
df2$id = paste0(df2$id, " (", df2$tag_ab, ")")
df2 = df2[complete.cases(df2),]
df2 = distinct(df2)
df2$x = df2$month
df2$freq = 1
df2 = distinct(df2)
df2$likes = ave(df2$freq, paste0(df2$id,df2$month), FUN = sum)
df2 = df2[, c("id", "x", "likes", "color")]
df2 = distinct(df2)
df2$total = ave(df2$likes, df2$x, FUN = sum)
df2 <- df2[order(df2$id, df2$x), ] # Ensure data is sorted by 'id' and 'x'
df2$likes.cum <- ave(df2$likes, df2$id, FUN = cumsum)
df3 = df2[, c("x", "total")]
df3 = unique (df3)
df3 <- df3[order(df3$x), ] # Ensure data is sorted by 'id' and 'x'
df3$total.cum <- ave(df3$total, FUN = cumsum)
df3$total=NULL
df2 = merge (df2, df3, by = "x")
df2$likes.pc = 100*df2$likes/df2$total
df2$likes.cum.pc = 100*df2$likes.cum/df2$total.cum
### -> likes
df2$y = df2$likes
df2 = df2[complete.cases(df2),]
df2 <- df2[order(df2$color), ] # Ensure data is sorted by 'id' and 'x'
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model")
write(toJSON(df2, pretty = TRUE), paste0("stacked-", i, "-top-", n, ".json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3, collapse="\n"), paste0("stacked-", i, "-top-", n, ".html"))
### -> likes pc
df2$y = df2$likes.pc
df2 = df2[complete.cases(df2),]
df2 <- df2[order(df2$color), ] # Ensure data is sorted by 'id' and 'x'
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model")
write(toJSON(df2, pretty = TRUE), paste0("stacked-", i, "-top-", n, "-pc.json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3, collapse="\n"), paste0("stacked-", i, "-top-", n, "-pc.html"))
### -> cum likes
df2$y = df2$likes.cum
df2 = df2[complete.cases(df2),]
df2 <- df2[order(df2$color), ] # Ensure data is sorted by 'id' and 'x'
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model")
write(toJSON(df2, pretty = TRUE), paste0("stacked-", i, "-top-", n, "-cumulative.json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3, collapse="\n"), paste0("stacked-", i, "-top-", n, "-cumulative.html"))
### -> cum likes pc
df2$y = df2$likes.cum.pc
df2 = df2[complete.cases(df2),]
df2 <- df2[order(df2$color), ] # Ensure data is sorted by 'id' and 'x'
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model")
write(toJSON(df2, pretty = TRUE), paste0("stacked-", i, "-top-", n, "-cumulative-pc.json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3, collapse="\n"), paste0("stacked-", i, "-top-", n, "-cumulative-pc.html"))
paste0(i, "-", p, "-", j, "-top-", n, ".json")
###
### CREATE ALL VIZ FOR SNAPSHOT; TIME; GEOGRAPHY
###
library(jsonlite)
library(data.table)
library(dplyr)
library(stringr)
### 0. LOAD SOURCE CODES
# palette :"#FFD21E"; "#FF9D00"; "#194acd"; "#791d81"; "#106c4e"; "#af191e"; "#6B7280"; "#e54c1c"; "#2f2f95"
# html source location - smart
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/1-data/HUGGING-FACE/viz")
p1 = paste(readLines("part-1.html"), collapse="\n") #before json data
p3 = paste(readLines("part-3.html"), collapse="\n") #before json data
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/1-data/HUGGING-FACE/viz/model")
p3.model = paste(readLines("part-3-model.html"), collapse="\n") # load specific p3
### 1. MODEL TREEMAPS
# repo and not models per se: https://huggingface.co/black-forest-labs/FLUX.1-dev # from https://huggingface.co/ChuckMcSneed/FLUX.1-dev
## 1.1 LOAD HF MODEL DATA
setwd("~/Dropbox/1-asg/1-production/1-data/HUGGING-FACE/testing")
df = fread("likes_2024.csv", nrows = 10000)
df = fread("hf_models.csv", nrows = 10000)
df = fread("hf_models.csv")
df$model <- sub(".*/", "", df$id)
df$repo = df$id
parent = fread("hf_models_tasks_parent.csv") # add parents for pipeline tags
parent$pipeline_tag = gsub(" ", "-", tolower(parent$task))
df = merge (df, parent, by = "pipeline_tag", all.x = T)
df$year = substr(df$created_at, 1, 4)
df = subset (df, df$year == 2024)
df = df[order(-df$likes),]
df = df[1:10000,]
df <- df %>%
mutate(license = str_extract(tags, "license:[^,]+") %>%
str_replace("license:", ""))
df <- df %>%
mutate(dataset = str_extract_all(tags, "dataset:[^,]+") %>%
lapply(function(x) str_replace_all(x, "dataset:", "")) %>%
lapply(paste, collapse = ";") %>%
unlist())
df$library = df$library_name
## 1.2 MODEL VIZ
# define parameters
i = "model" #id
p = "tag" #parent
j = "downloads_all_time" # what is the value
j = "downloads" # what is the value
j = "likes"
n = 200 # better than 100
# subset
df2 = df
df2$id = df2[[i]]
df2$name = df2[[i]]
df2$value = df2[[j]]
df2$parent = df2[[p]]
df2$parent2 = df2$author
df2 = df2[order(-df2$value),]
df2 = df2[, c("id", "name", "parent", "parent2", "color", "value",
"repo", "downloads_all_time", "downloads", "likes", "created_at", "pipeline_tag",
"library_name", "license", "dataset")]
df2 = df2[1:n,]
# build treemap for models
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model/model")
i
j
n
paste0("treemap-", j, "-top-", n, ".json")
# build treemap for models
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model/model")
write(toJSON(df2, pretty = TRUE), paste0("treemap-", j, "-top-", n, ".json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3.model, collapse="\n"), paste0("treemap-", j, "-top-", n, ".html"))
# define parameters
i = "model" #id
p = "tag" #parent
j = "downloads_all_time" # what is the value
j = "downloads_past_30_days" # what is the value
#j = "likes"
n = 200 # better than 100
# subset
df2 = df
df2$downloads_past_30_days = df2$downloads
df2$id = df2[[i]]
df2$name = df2[[i]]
df2$value = df2[[j]]
df2$parent = df2[[p]]
df2$parent2 = df2$author
df2 = df2[order(-df2$value),]
df2 = df2[, c("id", "name", "parent", "parent2", "color", "value",
"repo", "downloads_all_time", "downloads", "likes", "created_at", "pipeline_tag",
"library_name", "license", "dataset")]
df2 = df2[1:n,]
# build treemap for models
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model/model")
write(toJSON(df2, pretty = TRUE), paste0("treemap-", j, "-top-", n, ".json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3.model, collapse="\n"), paste0("treemap-", j, "-top-", n, ".html"))
# define parameters
i = "model" #id
p = "tag" #parent
j = "downloads_all_time" # what is the value
#j = "downloads_past_30_days" # what is the value
#j = "likes"
n = 200 # better than 100
# subset
df2 = df
df2$downloads_past_30_days = df2$downloads
df2$id = df2[[i]]
df2$name = df2[[i]]
df2$value = df2[[j]]
df2$parent = df2[[p]]
df2$parent2 = df2$author
df2 = df2[order(-df2$value),]
df2 = df2[, c("id", "name", "parent", "parent2", "color", "value",
"repo", "downloads_all_time", "downloads", "likes", "created_at", "pipeline_tag",
"library_name", "license", "dataset")]
df2 = df2[1:n,]
# build treemap for models
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model/model")
write(toJSON(df2, pretty = TRUE), paste0("treemap-", j, "-top-", n, ".json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3.model, collapse="\n"), paste0("treemap-", j, "-top-", n, ".html"))
i
j
###
### CREATE ALL VIZ FOR SNAPSHOT; TIME; GEOGRAPHY
###
# html source location - smart
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/1-data/HUGGING-FACE/viz")
p1 = paste(readLines("stacked-p1.html"), collapse="\n") #before json data
p3 = paste(readLines("stacked-p3.html"), collapse="\n") #before json data
library(jsonlite)
library(data.table)
library(dplyr)
library(stringr)
# NOW TIME
## 2.1 LOAD HF MODEL DATA
#{"id":"US","x":2019,"y":1056,"label":"US","color":"blue","count":1056,"parent":"US"},
setwd("~/Dropbox/1-asg/1-production/1-data/HUGGING-FACE/testing")
df = fread("likes_2024.csv")
# top
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model")
top = fromJSON("model-tag-likes-top-100.json")
# top
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model")
top = fromJSON("model-tag-likes-top-100.json")
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model/model")
top = fromJSON("treemap-likes-top-100.json")
###
### CREATE ALL VIZ FOR SNAPSHOT; TIME; GEOGRAPHY
###
# html source location - smart
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/1-data/HUGGING-FACE/viz")
p1 = paste(readLines("stacked-p1.html"), collapse="\n") #before json data
p3 = paste(readLines("stacked-p3.html"), collapse="\n") #before json data
library(jsonlite)
library(data.table)
library(dplyr)
library(stringr)
# NOW TIME
## 2.1 LOAD HF MODEL DATA
#{"id":"US","x":2019,"y":1056,"label":"US","color":"blue","count":1056,"parent":"US"},
setwd("~/Dropbox/1-asg/1-production/1-data/HUGGING-FACE/testing")
df = fread("likes_2024.csv")
# top
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model/model")
top = fromJSON("treemap-likes-top-100.json")
setwd("~/Dropbox/1-asg/1-production/1-data/HUGGING-FACE/testing")
parent = unique(fread("hf_models_tasks_parent.csv")[, c("tag", "tag_ab")])
top = merge (top, parent, by.x = "parent", by.y = "tag")
# top 100 authors
top$library = top$library_name
top$tag = top$parent
i = "author"
#i = "license"
i = "model"
#i = "library"
#i = "pipeline"
#i = "tag"
for (i in c("author", "pipeline", "license", "library", "tag")){
#df2 = df
df2 = subset (df, df$month>1)
colnames(df2)[colnames(df2) == "id"] <- "repo"
df2 = merge (df2, top, by = "repo")
df2$author = df2$parent2
df2$model = df2$repo
df2$pipeline = df2$pipeline_tag
df2$id = df2[[i]]
df2$id = paste0(df2$id, " (", df2$tag_ab, ")")
df2 = df2[complete.cases(df2),]
df2 = distinct(df2)
df2$x = df2$month
df2$freq = 1
df2 = distinct(df2)
df2$likes = ave(df2$freq, paste0(df2$id,df2$month), FUN = sum)
df2 = df2[, c("id", "x", "likes", "color")]
df2 = distinct(df2)
df2$total = ave(df2$likes, df2$x, FUN = sum)
df2 <- df2[order(df2$id, df2$x), ] # Ensure data is sorted by 'id' and 'x'
df2$likes.cum <- ave(df2$likes, df2$id, FUN = cumsum)
df3 = df2[, c("x", "total")]
df3 = unique (df3)
df3 <- df3[order(df3$x), ] # Ensure data is sorted by 'id' and 'x'
df3$total.cum <- ave(df3$total, FUN = cumsum)
df3$total=NULL
df2 = merge (df2, df3, by = "x")
df2$likes.pc = 100*df2$likes/df2$total
df2$likes.cum.pc = 100*df2$likes.cum/df2$total.cum
### -> likes
df2$y = df2$likes
df2 = df2[complete.cases(df2),]
df2 <- df2[order(df2$color), ] # Ensure data is sorted by 'id' and 'x'
setwd(paste0("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model/", i))
write(toJSON(df2, pretty = TRUE), paste0("stacked-likes-top-", n, ".json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3, collapse="\n"), paste0("stacked-likes-top-", n, ".html"))
### -> likes pc
df2$y = df2$likes.pc
df2 = df2[complete.cases(df2),]
df2 <- df2[order(df2$color), ] # Ensure data is sorted by 'id' and 'x'
setwd(paste0("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model/", i))
write(toJSON(df2, pretty = TRUE), paste0("stacked-likes-top-", n, "-pc.json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3, collapse="\n"), paste0("stacked-likes-top-", n, "-pc.html"))
### -> cum likes
df2$y = df2$likes.cum
df2 = df2[complete.cases(df2),]
df2 <- df2[order(df2$color), ] # Ensure data is sorted by 'id' and 'x'
setwd(paste0("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model/", i))
write(toJSON(df2, pretty = TRUE), paste0("stacked-likes-top-", n, "-cumulative.json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3, collapse="\n"), paste0("stacked-likes-top-", n, "-cumulative.html"))
### -> cum likes pc
df2$y = df2$likes.cum.pc
df2 = df2[complete.cases(df2),]
df2 <- df2[order(df2$color), ] # Ensure data is sorted by 'id' and 'x'
setwd(paste0("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model/", i))
write(toJSON(df2, pretty = TRUE), paste0("stacked-likes-top-", n, "-cumulative-pc.json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3, collapse="\n"), paste0("stacked-likes-top-", n, "-cumulative-pc.html"))
}
setwd("~/Dropbox/PABalland.github.io/hf")
# Define the folder path
folder_path <- "~/Dropbox/PABalland.github.io/hf/api"  # Replace with your folder path
# Define the folder path
folder_path <- "~/Dropbox/PABalland.github.io/hf/api"  # Replace with your folder path
# Retrieve all HTML files (recursively)
html_files <- list.files(path = folder_path, pattern = "\\.html$", full.names = TRUE, recursive = TRUE)
# Create a data frame with index, file paths, and file names
df <- data.frame(
index = seq_along(html_files),
file_path = html_files,
file_name = basename(html_files),
stringsAsFactors = FALSE
)
View(df)
# Define the folder path
folder_path <- "~/Dropbox/PABalland.github.io/hf/api"  # Replace with your folder path
# Retrieve all HTML files (recursively)
html_files <- list.files(path = folder_path, pattern = "\\.html$", full.names = TRUE, recursive = TRUE)
# Create a data frame with index, file paths, and file names
df <- data.frame(
index = seq_along(html_files),
file_path = html_files,
file_name = basename(html_files),
stringsAsFactors = FALSE
)
# Define the folder path
folder_path <- "~/Dropbox/PABalland.github.io/hf/api"  # Replace with your folder path
# Retrieve all HTML files (recursively)
html_files <- list.files(path = folder_path, pattern = "\\.html$", full.names = TRUE, recursive = TRUE)
# Create a data frame with index, file paths, and file names
df <- data.frame(
index = seq_along(html_files),
file_path = html_files,
file_name = basename(html_files),
stringsAsFactors = FALSE
)
View(df)
write.csv(df, "all-files.csv")
setwd(paste0("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model/", i))
i
i = "model"
#df2 = df
df2 = subset (df, df$month>1)
colnames(df2)[colnames(df2) == "id"] <- "repo"
df2 = merge (df2, top, by = "repo")
###
### CREATE ALL VIZ FOR SNAPSHOT; TIME; GEOGRAPHY
###
# html source location - smart
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/1-data/HUGGING-FACE/viz")
p1 = paste(readLines("stacked-p1.html"), collapse="\n") #before json data
p3 = paste(readLines("stacked-p3.html"), collapse="\n") #before json data
library(jsonlite)
library(data.table)
library(dplyr)
library(stringr)
# NOW TIME
## 2.1 LOAD HF MODEL DATA
#{"id":"US","x":2019,"y":1056,"label":"US","color":"blue","count":1056,"parent":"US"},
setwd("~/Dropbox/1-asg/1-production/1-data/HUGGING-FACE/testing")
df = fread("likes_2024.csv")
# top
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model/model")
top = fromJSON("treemap-likes-top-100.json")
setwd("~/Dropbox/1-asg/1-production/1-data/HUGGING-FACE/testing")
parent = unique(fread("hf_models_tasks_parent.csv")[, c("tag", "tag_ab")])
top = merge (top, parent, by.x = "parent", by.y = "tag")
# top 100 authors
top$library = top$library_name
top$tag = top$parent
i = "author"
#i = "license"
i = "model"
#i = "library"
#i = "pipeline"
#i = "tag"
#df2 = df
df2 = subset (df, df$month>1)
colnames(df2)[colnames(df2) == "id"] <- "repo"
df2 = merge (df2, top, by = "repo")
df2$author = df2$parent2
df2$model = df2$repo
df2$pipeline = df2$pipeline_tag
df2$id = df2[[i]]
df2$id = paste0(df2$id, " (", df2$tag_ab, ")")
df2 = df2[complete.cases(df2),]
df2 = distinct(df2)
df2$x = df2$month
df2$freq = 1
df2 = distinct(df2)
df2$likes = ave(df2$freq, paste0(df2$id,df2$month), FUN = sum)
df2 = df2[, c("id", "x", "likes", "color")]
df2 = distinct(df2)
df2$total = ave(df2$likes, df2$x, FUN = sum)
df2 <- df2[order(df2$id, df2$x), ] # Ensure data is sorted by 'id' and 'x'
df2$likes.cum <- ave(df2$likes, df2$id, FUN = cumsum)
df3 = df2[, c("x", "total")]
df3 = unique (df3)
df3 <- df3[order(df3$x), ] # Ensure data is sorted by 'id' and 'x'
df3$total.cum <- ave(df3$total, FUN = cumsum)
df3$total=NULL
df2 = merge (df2, df3, by = "x")
df2$likes.pc = 100*df2$likes/df2$total
df2$likes.cum.pc = 100*df2$likes.cum/df2$total.cum
### -> likes
df2$y = df2$likes
df2 = df2[complete.cases(df2),]
df2 <- df2[order(df2$color), ] # Ensure data is sorted by 'id' and 'x'
setwd(paste0("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model/", i))
write(toJSON(df2, pretty = TRUE), paste0("stacked-likes-top-", n, ".json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3, collapse="\n"), paste0("stacked-likes-top-", n, ".html"))
### -> likes pc
df2$y = df2$likes.pc
df2 = df2[complete.cases(df2),]
df2 <- df2[order(df2$color), ] # Ensure data is sorted by 'id' and 'x'
setwd(paste0("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model/", i))
write(toJSON(df2, pretty = TRUE), paste0("stacked-likes-top-", n, "-pc.json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3, collapse="\n"), paste0("stacked-likes-top-", n, "-pc.html"))
### -> cum likes
df2$y = df2$likes.cum
df2 = df2[complete.cases(df2),]
df2 <- df2[order(df2$color), ] # Ensure data is sorted by 'id' and 'x'
setwd(paste0("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model/", i))
write(toJSON(df2, pretty = TRUE), paste0("stacked-likes-top-", n, "-cumulative.json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3, collapse="\n"), paste0("stacked-likes-top-", n, "-cumulative.html"))
### -> cum likes pc
df2$y = df2$likes.cum.pc
df2 = df2[complete.cases(df2),]
df2 <- df2[order(df2$color), ] # Ensure data is sorted by 'id' and 'x'
setwd(paste0("/Users/pierre-alex/Dropbox/PABalland.github.io/hf/api/model/", i))
write(toJSON(df2, pretty = TRUE), paste0("stacked-likes-top-", n, "-cumulative-pc.json"))
writeLines(paste (p1, toJSON(df2, pretty = TRUE), p3, collapse="\n"), paste0("stacked-likes-top-", n, "-cumulative-pc.html"))
# Define the folder path
folder_path <- "~/Dropbox/PABalland.github.io/hf/api"  # Replace with your folder path
# Retrieve all HTML files (recursively)
html_files <- list.files(path = folder_path, pattern = "\\.html$", full.names = TRUE, recursive = TRUE)
# Create a data frame with index, file paths, and file names
df <- data.frame(
index = seq_along(html_files),
file_path = html_files,
file_name = basename(html_files),
stringsAsFactors = FALSE
)
write.csv(df, "all-files.csv")
