# compute nbs; all
root = "~/Dropbox/1-asg/1-production/3-projects/3-eu-us-network"
# LOAD PACKAGES & DATA
library(jsonlite)
library(EconGeo)
source("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/untapped.potential.only.R")
source("~/Dropbox/1-asg/1-production/3-projects/3-eu-us-network/plot.net.R")
names = fromJSON("https://www.paballand.com/geo/urban.json")[, c("urban_id", "urban_name", "country_name", "state", "latitude", "longitude")]
ctry = fromJSON("https://www.paballand.com/geo/country.json")[, c("country_name", "continent", "eu")]
names = merge (names, ctry, by = "country_name")
# DEFINE LEVELS
j = "urban" # urban;nuts3;fua;
k = "all" # all;wipo;priority
setwd(paste0(root, "/data/geo"))
setwd(paste0(root, "/data/geo/", j, "/", j, "/", k))
### 1. COMPARE EU/US FOR PERIOD 2019-2023
net2 = NULL
for (i in c(2019:2023)){
net = read.csv (paste0("regpat-pct-", i, ".csv"))
net2 = rbind (net2, net)
}
# combine for the all period
net = net2
net$full = ave(net$full, paste0(net$from, net$to), FUN = sum)
net$binary = ave(net$binary, paste0(net$from, net$to), FUN = sum)
net$year = "2019-2023"
net = unique (net)
net = merge (net, names, by.x = "from", by.y = "urban_id")
net = merge (net, names, by.x = "to", by.y = "urban_id")
net$category = "between"
net$category[net$state.x == net$state.y] = "within-state"
net$category[net$urban_name.x == net$urban_name.y] = "within-urban"
# create json files to
# later plot network as d3plus
top = 5
names2 = names
net2 = net
names = subset (names2, names2$country_name=="United States")
net = subset (net2, net2$country_name.x=="United States" & net2$country_name.y=="United States")
names$net.id = as.numeric(factor (paste0(names$country_name,names$urban_name))) - 1
nodes = names
nodes$id = nodes$urban_name
nodes$id2 = nodes$net.id
nodes$x = nodes$latitude
nodes$y = nodes$longitude
nodes$color = "darkred"
nodes$parent = nodes$state
nodes$size = 1
nodes = nodes[, c("id", "id2", "x", "y", "color", "parent", "size")]
# add names
links = net
head(links)
head(names)
# update openalex
# classify other techs
# compute nbs; all
root = "~/Dropbox/1-asg/1-production/3-projects/3-eu-us-network"
# LOAD PACKAGES & DATA
library(jsonlite)
library(EconGeo)
source("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/untapped.potential.only.R")
source("~/Dropbox/1-asg/1-production/3-projects/3-eu-us-network/plot.net.R")
names = fromJSON("https://www.paballand.com/geo/urban.json")[, c("urban_id", "urban_name", "country_name", "state", "latitude", "longitude")]
ctry = fromJSON("https://www.paballand.com/geo/country.json")[, c("country_name", "continent", "eu")]
names = merge (names, ctry, by = "country_name")
# DEFINE LEVELS
j = "urban" # urban;nuts3;fua;
k = "all" # all;wipo;priority
setwd(paste0(root, "/data/geo"))
setwd(paste0(root, "/data/geo/", j, "/", j, "/", k))
### 1. COMPARE EU/US FOR PERIOD 2019-2023
net2 = NULL
for (i in c(2019:2023)){
net = read.csv (paste0("regpat-pct-", i, ".csv"))
net2 = rbind (net2, net)
}
# combine for the all period
net = net2
net$full = ave(net$full, paste0(net$from, net$to), FUN = sum)
net$binary = ave(net$binary, paste0(net$from, net$to), FUN = sum)
net$year = "2019-2023"
net = unique (net)
net = merge (net, names, by.x = "from", by.y = "urban_id")
net = merge (net, names, by.x = "to", by.y = "urban_id")
net$category = "between"
net$category[net$state.x == net$state.y] = "within-state"
net$category[net$urban_name.x == net$urban_name.y] = "within-urban"
# create json files to
# later plot network as d3plus
top = 5
names2 = names
net2 = net
names = subset (names2, names2$country_name=="United States")
net = subset (net2, net2$country_name.x=="United States" & net2$country_name.y=="United States")
plot.net(names, net, saveas="us")
nodes = names
nodes$id = nodes$urban_name
nodes$id2 = nodes$net.id
nodes$x = nodes$latitude
nodes$y = nodes$longitude
nodes$color = "darkred"
nodes$parent = nodes$state
nodes$size = 1
nodes = nodes[, c("id", "id2", "x", "y", "color", "parent", "size", "urban_id")]
head(nodes)
head(links)
links = merge(links, nodes[, c("id", "urban_id")], by.x = "from", by.y = "urban_id")
# update openalex
# classify other techs
# compute nbs; all
root = "~/Dropbox/1-asg/1-production/3-projects/3-eu-us-network"
# LOAD PACKAGES & DATA
library(jsonlite)
library(EconGeo)
source("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/untapped.potential.only.R")
source("~/Dropbox/1-asg/1-production/3-projects/3-eu-us-network/plot.net.R")
names = fromJSON("https://www.paballand.com/geo/urban.json")[, c("urban_id", "urban_name", "country_name", "state", "latitude", "longitude")]
ctry = fromJSON("https://www.paballand.com/geo/country.json")[, c("country_name", "continent", "eu")]
names = merge (names, ctry, by = "country_name")
# DEFINE LEVELS
j = "urban" # urban;nuts3;fua;
k = "all" # all;wipo;priority
setwd(paste0(root, "/data/geo"))
setwd(paste0(root, "/data/geo/", j, "/", j, "/", k))
### 1. COMPARE EU/US FOR PERIOD 2019-2023
net2 = NULL
for (i in c(2019:2023)){
net = read.csv (paste0("regpat-pct-", i, ".csv"))
net2 = rbind (net2, net)
}
# combine for the all period
net = net2
net$full = ave(net$full, paste0(net$from, net$to), FUN = sum)
net$binary = ave(net$binary, paste0(net$from, net$to), FUN = sum)
net$year = "2019-2023"
net = unique (net)
net = merge (net, names, by.x = "from", by.y = "urban_id")
net = merge (net, names, by.x = "to", by.y = "urban_id")
net$category = "between"
net$category[net$state.x == net$state.y] = "within-state"
net$category[net$urban_name.x == net$urban_name.y] = "within-urban"
# create json files to
# later plot network as d3plus
top = 5
names2 = names
net2 = net
names = subset (names2, names2$country_name=="United States")
net = subset (net2, net2$country_name.x=="United States" & net2$country_name.y=="United States")
plot.net(names, net, saveas="us")
names$net.id = as.numeric(factor (paste0(names$country_name,names$urban_name))) - 1
nodes = names
nodes$id = nodes$urban_name
nodes$id2 = nodes$net.id
nodes$x = nodes$latitude
nodes$y = nodes$longitude
nodes$color = "darkred"
nodes$parent = nodes$state
nodes$size = 1
nodes = nodes[, c("id", "id2", "x", "y", "color", "parent", "size", "urban_id")]
# add names
links = net
links = merge(links, nodes[, c("id", "urban_id")], by.x = "from", by.y = "urban_id")
links$source = links$net.id.x
links$target = links$net.id.y
links$weight = links$binary
# keep only top n links per node
links2 = NULL
for (k in unique (links$from)) {
links3 = subset (links, links$from==k)
links3=links3[order(-links3$weight), ]
links3=links3[1:top,]
links3=na.omit(links3)
links2 = rbind (links2, links3)
}
# keep the nodes with 0 links
#links3 = subset(links, links$weight==0)
#links2 = rbind (links2, links3)
links2 = links2[order(-links2$weight),] # need to sort to then remove 0 links
links = links2[, c("source", "target", "weight")]
View(links2)
head(links)
head(nodes)
# update openalex
# classify other techs
# compute nbs; all
root = "~/Dropbox/1-asg/1-production/3-projects/3-eu-us-network"
# LOAD PACKAGES & DATA
library(jsonlite)
library(EconGeo)
source("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/untapped.potential.only.R")
source("~/Dropbox/1-asg/1-production/3-projects/3-eu-us-network/plot.net.R")
names = fromJSON("https://www.paballand.com/geo/urban.json")[, c("urban_id", "urban_name", "country_name", "state", "latitude", "longitude")]
ctry = fromJSON("https://www.paballand.com/geo/country.json")[, c("country_name", "continent", "eu")]
names = merge (names, ctry, by = "country_name")
# DEFINE LEVELS
j = "urban" # urban;nuts3;fua;
k = "all" # all;wipo;priority
setwd(paste0(root, "/data/geo"))
setwd(paste0(root, "/data/geo/", j, "/", j, "/", k))
### 1. COMPARE EU/US FOR PERIOD 2019-2023
net2 = NULL
for (i in c(2019:2023)){
net = read.csv (paste0("regpat-pct-", i, ".csv"))
net2 = rbind (net2, net)
}
# combine for the all period
net = net2
net$full = ave(net$full, paste0(net$from, net$to), FUN = sum)
net$binary = ave(net$binary, paste0(net$from, net$to), FUN = sum)
net$year = "2019-2023"
net = unique (net)
net = merge (net, names, by.x = "from", by.y = "urban_id")
net = merge (net, names, by.x = "to", by.y = "urban_id")
net$category = "between"
net$category[net$state.x == net$state.y] = "within-state"
net$category[net$urban_name.x == net$urban_name.y] = "within-urban"
# create json files to
# later plot network as d3plus
top = 5
names2 = names
net2 = net
names = subset (names2, names2$country_name=="United States")
net = subset (net2, net2$country_name.x=="United States" & net2$country_name.y=="United States")
plot.net(names, net, saveas="us")
names$net.id = as.numeric(factor (paste0(names$country_name,names$urban_name))) - 1
nodes = names
nodes$id = nodes$urban_name
nodes$id2 = nodes$net.id
nodes$x = nodes$latitude
nodes$y = nodes$longitude
nodes$color = "darkred"
nodes$parent = nodes$state
nodes$size = 1
nodes = nodes[, c("id", "id2", "x", "y", "color", "parent", "size", "urban_id")]
# add names
links = net
links = merge(links, nodes[, c("id2", "urban_id")], by.x = "from", by.y = "urban_id")
links$source = links$id2.x
links$target = links$id2.y
links$weight = links$binary
View(links)
# update openalex
# classify other techs
# compute nbs; all
root = "~/Dropbox/1-asg/1-production/3-projects/3-eu-us-network"
# LOAD PACKAGES & DATA
library(jsonlite)
library(EconGeo)
source("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/untapped.potential.only.R")
source("~/Dropbox/1-asg/1-production/3-projects/3-eu-us-network/plot.net.R")
names = fromJSON("https://www.paballand.com/geo/urban.json")[, c("urban_id", "urban_name", "country_name", "state", "latitude", "longitude")]
ctry = fromJSON("https://www.paballand.com/geo/country.json")[, c("country_name", "continent", "eu")]
names = merge (names, ctry, by = "country_name")
# DEFINE LEVELS
j = "urban" # urban;nuts3;fua;
k = "all" # all;wipo;priority
setwd(paste0(root, "/data/geo"))
setwd(paste0(root, "/data/geo/", j, "/", j, "/", k))
### 1. COMPARE EU/US FOR PERIOD 2019-2023
net2 = NULL
for (i in c(2019:2023)){
net = read.csv (paste0("regpat-pct-", i, ".csv"))
net2 = rbind (net2, net)
}
# combine for the all period
net = net2
net$full = ave(net$full, paste0(net$from, net$to), FUN = sum)
net$binary = ave(net$binary, paste0(net$from, net$to), FUN = sum)
net$year = "2019-2023"
net = unique (net)
net = merge (net, names, by.x = "from", by.y = "urban_id")
net = merge (net, names, by.x = "to", by.y = "urban_id")
net$category = "between"
net$category[net$state.x == net$state.y] = "within-state"
net$category[net$urban_name.x == net$urban_name.y] = "within-urban"
# create json files to
# later plot network as d3plus
top = 5
names2 = names
net2 = net
names = subset (names2, names2$country_name=="United States")
net = subset (net2, net2$country_name.x=="United States" & net2$country_name.y=="United States")
plot.net(names, net, saveas="us")
head(names2)
unique(names2$eu)
names = subset (names2, names2$eu=="EU14"|names2$eu=="EU13"|names2$eu=="EFTA"|names2$eu=="GB")
net = subset (net2, net2$country_name.x %in% names$country_name & net2$country_name.y %in% names$country_name)
View(net)
names = subset (names2, names2$eu=="EU14"|names2$eu=="EU13"|names2$eu=="EFTA"|names2$eu=="GB")
net = subset (net2, net2$country_name.x %in% names$country_name & net2$country_name.y %in% names$country_name)
plot.net(names, net, saveas="eu")
names = subset (names2, names2$country_name=="United States")
head(names)
names = subset (names2, names2$country_name=="United States")
color = "darkred"
net = subset (net2, net2$country_name.x=="United States" & net2$country_name.y=="United States")
plot.net(names, net, saveas="us")
names = subset (names2, names2$eu=="EU14"|names2$eu=="EU13"|names2$eu=="EFTA"|names2$eu=="GB")
color = "darkblue"
net = subset (net2, net2$country_name.x %in% names$country_name & net2$country_name.y %in% names$country_name)
plot.net(names, net, saveas="eu")
# update openalex
# classify other techs
# compute nbs; all
root = "~/Dropbox/1-asg/1-production/3-projects/3-eu-us-network"
# LOAD PACKAGES & DATA
library(jsonlite)
library(EconGeo)
source("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/untapped.potential.only.R")
source("~/Dropbox/1-asg/1-production/3-projects/3-eu-us-network/plot.net.R")
names = fromJSON("https://www.paballand.com/geo/urban.json")[, c("urban_id", "urban_name", "country_name", "state", "latitude", "longitude")]
ctry = fromJSON("https://www.paballand.com/geo/country.json")[, c("country_name", "continent", "eu")]
names = merge (names, ctry, by = "country_name")
# DEFINE LEVELS
j = "urban" # urban;nuts3;fua;
k = "all" # all;wipo;priority
setwd(paste0(root, "/data/geo"))
setwd(paste0(root, "/data/geo/", j, "/", j, "/", k))
### 1. COMPARE EU/US FOR PERIOD 2019-2023
net2 = NULL
for (i in c(2019:2023)){
net = read.csv (paste0("regpat-pct-", i, ".csv"))
net2 = rbind (net2, net)
}
# combine for the all period
net = net2
net$full = ave(net$full, paste0(net$from, net$to), FUN = sum)
net$binary = ave(net$binary, paste0(net$from, net$to), FUN = sum)
net$year = "2019-2023"
net = unique (net)
net = merge (net, names, by.x = "from", by.y = "urban_id")
net = merge (net, names, by.x = "to", by.y = "urban_id")
net$category = "between"
net$category[net$state.x == net$state.y] = "within-state"
net$category[net$urban_name.x == net$urban_name.y] = "within-urban"
# create json files to
# later plot network as d3plus
top = 10
names2 = names
net2 = net
names = subset (names2, names2$country_name=="United States")
color = "darkred"
net = subset (net2, net2$country_name.x=="United States" & net2$country_name.y=="United States")
plot.net(names, net, saveas="us")
names = subset (names2, names2$country_name=="United States")
net = subset (net2, net2$country_name.x=="United States" & net2$country_name.y=="United States")
plot.net(names, net, saveas="us", color = "darkred")
names = subset (names2, names2$eu=="EU14"|names2$eu=="EU13"|names2$eu=="EFTA"|names2$eu=="GB")
net = subset (net2, net2$country_name.x %in% names$country_name & net2$country_name.y %in% names$country_name)
plot.net(names, net, saveas="eu", color = "darkblue")
View(net2)
net = subset (net, !net$from == net$to)
net = untapped.potential.only(net)
#net2 = subset (net2, net2$binary>0)
cor(net$expected, net$binary)
View(net)
head(names)
names = subset (names2, names2$country_name=="United States")
net = subset (net2, net2$country_name.x=="United States" & net2$country_name.y=="United States")
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "from")
head(net)
net = subset (net, !net$from == net$to)
net = untapped.potential.only(net)
#net2 = subset (net2, net2$binary>0)
cor(net$expected, net$binary)
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "from", by.y = "urban_id")
View(net)
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "from", by.y = "urban_id")
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "to", by.y = "urban_id")
names = subset (names2, names2$country_name=="United States")
net = subset (net2, net2$country_name.x=="United States" & net2$country_name.y=="United States")
plot.net(names, net, saveas="us", color = "darkred")
net = subset (net, !net$from == net$to)
net = untapped.potential.only(net)
#net2 = subset (net2, net2$binary>0)
cor(net$expected, net$binary)
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "from", by.y = "urban_id")
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "to", by.y = "urban_id")
View(net)
net$from = net$urban_name.x
net$to = net$urban_name.y
View(net)
names = subset (names2, names2$eu=="EU14"|names2$eu=="EU13"|names2$eu=="EFTA"|names2$eu=="GB")
net = subset (net2, net2$country_name.x %in% names$country_name & net2$country_name.y %in% names$country_name)
plot.net(names, net, saveas="eu", color = "darkblue")
net = subset (net, !net$from == net$to)
net = untapped.potential.only(net)
#net2 = subset (net2, net2$binary>0)
cor(net$expected, net$binary)
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "from", by.y = "urban_id")
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "to", by.y = "urban_id")
net$from = net$urban_name.x
net$to = net$urban_name.y
View(net)
names = subset (names2, names2$country_name=="United States")
net = subset (net2, net2$country_name.x=="United States" & net2$country_name.y=="United States")
plot.net(names, net, saveas="us", color = "darkred")
net = subset (net, !net$from == net$to)
net = untapped.potential.only(net)
View(net)
colnames(net)
source("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/untapped.potential.only.R")
names = subset (names2, names2$country_name=="United States")
net = subset (net2, net2$country_name.x=="United States" & net2$country_name.y=="United States")
plot.net(names, net, saveas="us", color = "darkred")
net = subset (net, !net$from == net$to)
net = untapped.potential.only(net)
#net2 = subset (net2, net2$binary>0)
cor(net$expected, net$binary) # 0.4145941
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "from", by.y = "urban_id")
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "to", by.y = "urban_id")
net$from = net$urban_name.x
net$to = net$urban_name.y
View(net)
names = subset (names2, names2$country_name=="United States")
net = subset (net2, net2$country_name.x=="United States" & net2$country_name.y=="United States")
plot.net(names, net, saveas="us", color = "darkred")
net = subset (net, !net$from == net$to)
net = untapped.potential.only(net)
#net2 = subset (net2, net2$binary>0)
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "from", by.y = "urban_id")
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "to", by.y = "urban_id")
net$from = net$urban_name.x
net$to = net$urban_name.y
net = subset (net, !net$from == net$to)
cor(net$expected, net$binary) # 0.4145941
View(net)
names = subset (names2, names2$eu=="EU14"|names2$eu=="EU13"|names2$eu=="EFTA"|names2$eu=="GB")
net = subset (net2, net2$country_name.x %in% names$country_name & net2$country_name.y %in% names$country_name)
plot.net(names, net, saveas="eu", color = "darkblue")
net = subset (net, !net$from == net$to)
net = untapped.potential.only(net)
#net2 = subset (net2, net2$binary>0)
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "from", by.y = "urban_id")
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "to", by.y = "urban_id")
net$from = net$urban_name.x
net$to = net$urban_name.y
net = subset (net, !net$from == net$to)
cor(net$expected, net$binary) # 0.4205493
View(net)
View(net)
names = subset (names2, names2$country_name=="United States")
net = subset (net2, net2$country_name.x=="United States" & net2$country_name.y=="United States")
plot.net(names, net, saveas="us", color = "darkred")
net = subset (net, !net$from == net$to)
net = untapped.potential.only(net)
#net2 = subset (net2, net2$binary>0)
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "from", by.y = "urban_id")
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "to", by.y = "urban_id")
net$from = net$urban_name.x
net$to = net$urban_name.y
cor(net$expected, net$binary) # 0.4205493
View(net)
names = subset (names2, names2$country_name=="United States")
net = subset (net2, net2$country_name.x=="United States" & net2$country_name.y=="United States")
plot.net(names, net, saveas="us", color = "darkred")
#net2 = subset (net2, net2$binary>0)
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "from", by.y = "urban_id")
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "to", by.y = "urban_id")
net$from = net$urban_name.x
net$to = net$urban_name.y
#net = subset (net, !net$from == net$to)
netx = untapped.potential.only(net)
names = subset (names2, names2$country_name=="United States")
net = subset (net2, net2$country_name.x=="United States" & net2$country_name.y=="United States")
plot.net(names, net, saveas="us", color = "darkred")
#net2 = subset (net2, net2$binary>0)
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "from", by.y = "urban_id")
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "to", by.y = "urban_id")
net$from = net$urban_name.x
net$to = net$urban_name.y
View(netx)
cor(netx$expected, netx$binary) # 0.4205493
names = subset (names2, names2$eu=="EU14"|names2$eu=="EU13"|names2$eu=="EFTA"|names2$eu=="GB")
net = subset (net2, net2$country_name.x %in% names$country_name & net2$country_name.y %in% names$country_name)
plot.net(names, net, saveas="eu", color = "darkblue")
netx = untapped.potential.only(net)
cor(net$expected, net$binary) # 0.4205493
cor(netx$expected, netx$binary) # 0.4205493
View(netx)
names = subset (names2, names2$country_name=="United States")
net = subset (net2, net2$country_name.x=="United States" & net2$country_name.y=="United States")
plot.net(names, net, saveas="us", color = "darkred")
#net2 = subset (net2, net2$binary>0)
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "from", by.y = "urban_id")
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "to", by.y = "urban_id")
net$from = net$urban_name.x
net$to = net$urban_name.y
#net = subset (net, !net$from == net$to)
netx = untapped.potential.only(net)
cor(netx$expected, netx$binary) # 0.1767041
net = subset (net, !net$from == net$to)
netx = untapped.potential.only(net)
cor(net$expected, net$binary) # 0.4145941
View(net)
names = subset (names2, names2$country_name=="United States")
net = subset (net2, net2$country_name.x=="United States" & net2$country_name.y=="United States")
plot.net(names, net, saveas="us", color = "darkred")
#net2 = subset (net2, net2$binary>0)
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "from", by.y = "urban_id")
net = merge(net, names[, c("urban_id", "urban_name")], by.x = "to", by.y = "urban_id")
net$from = net$urban_name.x
net$to = net$urban_name.y
#net = subset (net, !net$from == net$to)
netx = untapped.potential.only(net)
cor(netx$expected, netx$binary) # 0.1767041
net = subset (net, !net$from == net$to)
net = untapped.potential.only(net)
cor(net$expected, net$binary) # 0.4145941
net = subset (net, !net$from == net$to)
cor(net$expected, net$binary) # 0.4205493
View(net)
