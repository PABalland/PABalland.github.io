35250/2
evtools::install_github('yihui/tinytex')
devtools::install_github('yihui/tinytex')
devtools::install_github("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
# 1. Plot a network graph
#The first step is to read the list of edges and nodes in this network:
EL = read.csv ("https://raw.githubusercontent.com/PABalland/ON/master/lesmis-el.csv")
head(EL)
NL = read.csv ("https://raw.githubusercontent.com/PABalland/ON/master/lesmis-nl.csv")
head(NL)
#install.packages("igraph")
library (igraph)
g <- graph_from_data_frame(d=EL, vertices=NL, directed=FALSE)
plot (g)
# D3 network (interactive)
EL2 = EL[, 1:2]
head(EL2)
library (networkD3)
simpleNetwork(EL2)
# library(devtools)
# devtools::install_github("PABalland/EconGeo", force = T)
library (EconGeo)
# Import the data (read the csv file)
M = read.csv ("https://paballand.github.io/teaching/ids/msa.sub.cat.pat.count.csv")
# Subset the data by keeping the decade 2000 only
M2000 = subset (M, dec == 2000)
# Keep only the variables "Cbsa.Name", "NBER.Sub.Cat", "pat.count" for this decade
M2000 = M2000[, c("Cbsa.Name", "NBER.Sub.Cat", "pat.count")]
# Transform the data into an adjacency matrix (using "get.matrix")
M2000 = get.matrix (M2000)
# Compute the co-occurrences of technologies (co.occurrence)
c = co.occurrence (t(M2000))
# Compute relatedness between technologies and make the matrix binary
r = relatedness (c)
r
EL = get.list (r)
View(EL)
head(NL)
# plot
g = graph_from_adjacency_matrix(r, weighted=TRUE, mode="undirected", diag=FALSE)
plot (g)
head(M)
# Subset the data by keeping the decade 2000 only
M2000 = subset (M, dec == 2000)
# Keep only the variables "Cbsa.Name", "NBER.Sub.Cat", "pat.count" for this decade
M2000 = M2000[, c("Cbsa.Name", "NBER.Sub.Cat.Name", "pat.count")]
# Transform the data into an adjacency matrix (using "get.matrix")
M2000 = get.matrix (M2000)
# Compute the co-occurrences of technologies (co.occurrence)
c = co.occurrence (t(M2000))
# Compute relatedness between technologies and make the matrix binary
r = relatedness (c)
# plot
g = graph_from_adjacency_matrix(r, weighted=TRUE, mode="undirected", diag=FALSE)
plot (g)
r[r<1] = 0
r[r>1] = 1
g = graph_from_adjacency_matrix(r, weighted=TRUE, mode="undirected", diag=FALSE)
plot (g)
# Compute the binary version of the relative advantage of a
# all cities in all technologies (RCA)
rca = RCA(M2000, binary = T)
# 9. Compute relatedness density
rd = relatedness.density(rca, r)
View(rd)
library('rvest')
#Specifying the url for desired website to be scraped
url <- 'http://www.imdb.com/search/title?count=100&release_date=2016,2016&title_type=feature'
#Reading the HTML code from the website
webpage <- read_html(url)
webpage
#Specifying the url for desired website to be scraped
url <- 'https://deymeaufildesrues.wordpress.com/les-deymois-racontent/les-cathares-ques-aco/'
#Reading the HTML code from the website
read_html(url)
#Reading the HTML code from the website
webpage = read_html(url)
View(webpage)
library(httr)
#GET HTML page and transfer it to tables
rlo <- httr::GET("http://baseballaustria.com/regionalliga-ost/")
rlo
rlo <- xml2::read_html(rlo)
rlo
#GET HTML page and transfer it to tables
rlo <- httr::GET("http://baseballaustria.com/regionalliga-ost/")
rlo <- xml2::read_html(rlo)
#read out "table node"
schedule <- rvest::html_nodes(rlo, css = "table")[2]
#Get the raw schedule
schedule <- rvest::html_table(schedule)
schedule
rlo
#Specifying the url for desired website to be scraped
url <- 'https://deymeaufildesrues.wordpress.com/les-deymois-racontent/les-cathares-ques-aco/'
#Reading the HTML code from the website
webpage = read_html(url)
View(webpage)
url <- 'https://deymeaufildesrues.wordpress.com/les-deymois-racontent/les-cathares-ques-aco/'
#Reading the HTML code from the website
webpage = read_html(url)
title_data_html <- html_nodes(webpage,'entry-content')
View(title_data_html)
View(webpage)
xml_child(webpage, 2)
tolower("G06F - ELECTRIC DIGITAL DATA PROCESSING")
tolower("H04L - TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION")
options(stringsAsFactors=FALSE)
library(jsonlite)
library(EconGeo)
library(RColorBrewer)
library(igraph)
library(qgraph)
dir = "D:/Dropbox/2-private/1-asg/Projects/4-occitanie/"
dir2 = "D:/Dropbox/2-private/PABalland.github.io/asg/occitanie"
# extract s3 fields
# read crosswalk
setwd(paste0(dir, "1-data"))
d = read.csv("0-S3-CPC-clean.csv", sep = ";", check.names = F)
colnames (d) = c("KIA",	"S3",	"CPC",	"Description")
s3 = unique (d[, c("KIA",	"S3")])
s3$id = as.numeric(factor (unique (s3$S3)))
# load different parts of html
setwd(paste0(dir, "3-outputs/technology-space/_source"))
p1 = paste(readLines("graph-part-1.html"), collapse="\n") #before json data
p3 = paste(readLines("graph-part-3.html"), collapse="\n") #after json data
p5 = paste(readLines("graph-part-5.html"), collapse="\n") #before json data
# load relatedness scores
setwd(paste0(dir, "2-analysis"))
df = as.matrix(read.csv2("2-relatedness-co-occ-co-class.p4.csv",
header = T,
check.names = F,
row.names = 1))
# subselect
df[lower.tri(df)] <- NA
df = get.list (df)
df = subset (df, df$Region %in% s3$S3)
df = subset (df, df$Industry %in% s3$S3)
# select nb links max
n = 6
edges = df
colnames (edges) = c("source", "target", "weight")
df = NULL
for (i in unique (edges$source)) {
df2 =subset (edges, edges$source == i | edges$target == i)
df2 = df2[order(-df2$weight),]
df2 = df2[1:n, ]
df = rbind (df, df2)
}
df = unique (df)
df = subset (df, df$weight>0)
# make igraph object
df2 = merge (df, s3, by.x = "source", by.y = "S3")
df2 = merge (df2, s3, by.x = "target", by.y = "S3")
df2 = df2[, c("id.x", "id.y", "weight")]
colnames (df2) = c("source", "target", "weight")
g <- graph_from_data_frame(d = df2, directed = F)
plot (g)
e = g
e <- get.edgelist(e)
e = cbind (as.numeric (e[1:143]), as.numeric (e[144:286]))
l <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))
plot(g,layout=l,vertex.size=4,vertex.label=NA)
set.seed(1)
coords <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))
nodes =  data.frame (
id2 = 1:39,
x = qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))[,1],
y = qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))[,2])
g2 <- graph_from_data_frame(d=df, directed=FALSE)
par(mar=c(1,1,1,1))
plot (g2)
#nodes =  data.frame (
# id2 = 1:39,
#  x = layout.fruchterman.reingold(g2)[,1],
#  y = layout.fruchterman.reingold(g2)[,2])
#nodes =  data.frame (
#  id2 = 1:39,
#  x = layout.lgl(g2)[,1],
#  y = layout.lgl(g2)[,2])
#nodes =  data.frame (
# id2 = 1:39,
#x = layout.kamada.kawai(g2)[,1],
#y = layout.kamada.kawai(g2)[,2])
# add s3 info
nodes = merge (nodes, s3, by.x = "id2", by.y = "id", all = T)
nodes$parent = nodes$KIA
nodes$color[nodes$parent == "Productions agricoles et agroalimentaires durables"] = "brown"
nodes$color[nodes$parent == "Mer et littoral"] = "lightblue"
nodes$color[nodes$parent == "Santé"] = "red"
nodes$color[nodes$parent == "Eau"] = "blue"
nodes$color[nodes$parent == "Matériaux et procédés pour l'aéronautique et industries de pointe"] = "grey"
nodes$color[nodes$parent == "Transition énergétique"] = "green"
nodes$color[nodes$parent == "Numérique - systèmes intelligents et chaîne de la donnée"] = "yellow"
nodes$id = nodes$S3
V(g)$name = as.numeric (V(g)$name) - 1
links = as.data.frame (cbind(get.edgelist(g), round(E(g)$weight, 3)))
links = links[,1:2]
colnames (links) = c("source", "target")
# change name
nodes$id = iconv(nodes$id, to = 'ASCII//TRANSLIT')
# convert to JSON
p2 = toJSON(nodes, encoding = "latin-ascii")
p2 = gsub('"x"', 'x', p2) # remove quotes that cause a pb
p2 = gsub('"y"', 'y', p2) # remove quotes that cause a pb
p4 = toJSON(links)
p4 = gsub('"', '', p4) # remove quotes that cause a pb
all = paste (p1, p2, p3, p4, p5, collapse="\n")
# save tech space
setwd(paste0(dir, "3-outputs//technology-space"))
writeLines(all, ("tech-space.html"))
setwd(paste0(dir2))
writeLines(all, ("tech-space.html"))
library (networkD3)
simpleNetwork(df[,1:2])
head(df)
el <- data.frame(from=as.numeric(factor(df$source))-1,
to=as.numeric(factor(df$target))-1 )
head(nodes)
nodes$color[nodes$parent == "Matériaux et procédés pour l’aéronautique et industries de pointe"] = "grey"
nodes
nodes$color[nodes$parent == "Numérique – systèmes intelligents et chaîne de la donnée"] = "yellow"
nl <- cbind(idn=factor(nodes$parent, levels=nodes$parent), nodes)
head(nodes)
View(nodes)
head(nodes)
nodes$id2 = nodes$id2-1
forceNetwork(Links = el, Nodes = nodes, Source="from", Target="to",
NodeID = "id2", Group = "parent",linkWidth = 1,
linkColour = "#afafaf", fontSize=12, zoom=T, legend=T, opacity = 0.8, charge=-300,
width = 600, height = 400)
nodes2 <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
