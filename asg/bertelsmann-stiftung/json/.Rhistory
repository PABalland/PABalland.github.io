df$pop[df$ctry=="MN"] = 3.34
df$pop[df$ctry=="MM"] = 53
df$pop[df$ctry=="MY"] = 33
df$pop[df$ctry=="PH"] = 113.9
df$pop[df$ctry=="SG"] = 5.45
df$pop[df$ctry=="TH"] = 71.6
df$pop[df$ctry=="TW"] = 23.57
df$pop[df$ctry=="VN"] = 97.47
df$pop[df$ctry=="MO"] = 0.7
df$pop[df$ctry=="HK"] = 7.48
df$ID = paste0(df$fua_id, df$parent)
df$count2 = ave(df$count, df$ID, FUN = sum)
# need pop country
df = unique(df[, c("fua_id", "fua_name", "count2", "parent", "pop")])
dff = df
### here pc
head(df)
### here pc
df$count2 = df$count2/df$pop
View(df)
options(stringsAsFactors=FALSE)
library (jsonlite)
library (EconGeo)
library (RColorBrewer)
library (data.table)
library (dplyr)
library (DT)
library(stringr)
dir = "D:/Dropbox/2-private/1-asg/1-production/1-twin-transition/3-outputs-wb"
dir.regpat = "C:/Dropbox/2-private/1-asg/1-production/1-data/PATENTS/REGPAT" # for latest regpat version
#web = "D:/Dropbox/2-private/PABalland.github.io/asg/continental"
# load different parts of html
setwd("C:/Dropbox/2-private/1-asg/1-production/2-code/smart")
p1 = paste(readLines("part-1.html"), collapse="\n") #before json data
p3 = paste(readLines("part-3.html"), collapse="\n") #after json data
# read priorities
setwd("C:/Dropbox/2-private/1-asg/1-production/3-projects/0-twin-transition/1-data")
df = fread ("pctnb-prio.csv", sep = ",", header = T)
df$priority <- str_trim(df$priority, "right") #remove white space
# merge to get parent
setwd("C:/Dropbox/2-private/1-asg/1-production/3-projects/0-twin-transition/1-data")
df2 = read.csv ("crosswalk.csv", sep = ";", header = T)[, c("parent", "priority")]
df2 = df2 %>% distinct ()
df = inner_join(df, df2, by = "priority", all = F)
# read inv info
setwd(dir.regpat)
inv = fread ("pctnb-inv-reg.csv", sep = ",", header = T)
inv$ctry = substr(inv$reg_code, 0, 2)
# eap countries: Philippines, Vietnam, Indonesia, Malaysia, Thailand, and Cambodia
ctries = c("CN", "ID", "JP", "KP", "KH", "KR", "LA",
"MN", "MM", "MY", "PH", "SG", "TH", "TW", "VN", "MO", "HK")
inv = subset (inv, inv$ctry %in% ctries)
inv = inv[, c("pct_nbr", "ctry")]
inv = inv %>% distinct ()
df = inner_join(df, inv, by = "pct_nbr")
df$year = as.numeric(substr(df$pct_nbr, 3, 6))
df = subset (df, df$year >= 2016) # select period
df$year = NULL
df$freq = 1
df$ID = paste0(df$priority, df$ctry)
df$count = ave(df$freq, df$ID, FUN = sum)
df$transition = df$parent
df$parent = df$ctry
df$id = df$priority
df = df[, c("id", "parent", "count", "transition", "ctry")]
df = df %>% distinct ()
df$fua_name = "H"
df$fua_name[df$ctry=="CN"] = "China"
df$fua_name[df$ctry=="ID"] = "Indonesia"
df$fua_name[df$ctry=="JP"] = "Japan"
df$fua_name[df$ctry=="KP"] = "Korea, Democratic People's Republic"
df$fua_name[df$ctry=="KH"] = "Cambodia"
df$fua_name[df$ctry=="KR"] = "Korea, Republic"
df$fua_name[df$ctry=="LA"] = "Laos"
df$fua_name[df$ctry=="MN"] = "Mongolia"
df$fua_name[df$ctry=="MM"] = "Myanmar"
df$fua_name[df$ctry=="MY"] = "Malaysia"
df$fua_name[df$ctry=="PH"] = "Philippines"
df$fua_name[df$ctry=="SG"] = "Singapore"
df$fua_name[df$ctry=="TH"] = "Thailand"
df$fua_name[df$ctry=="TW"] = "Taiwan"
df$fua_name[df$ctry=="VN"] = "Viet Nam"
df$fua_name[df$ctry=="MO"] = "Macau"
df$fua_name[df$ctry=="HK"] = "Hong Kong"
df$fua_id = df$ctry
df$parent = df$transition
df$pop[df$ctry=="CN"] = 1412
df$pop[df$ctry=="ID"] = 273
df$pop[df$ctry=="JP"] = 125
df$pop[df$ctry=="KP"] = 25.97
df$pop[df$ctry=="KH"] = 16.59
df$pop[df$ctry=="KR"] = 51.74
df$pop[df$ctry=="LA"] = 7.42
df$pop[df$ctry=="MN"] = 3.34
df$pop[df$ctry=="MM"] = 53
df$pop[df$ctry=="MY"] = 33
df$pop[df$ctry=="PH"] = 113.9
df$pop[df$ctry=="SG"] = 5.45
df$pop[df$ctry=="TH"] = 71.6
df$pop[df$ctry=="TW"] = 23.57
df$pop[df$ctry=="VN"] = 97.47
df$pop[df$ctry=="MO"] = 0.7
df$pop[df$ctry=="HK"] = 7.48
df$ID = paste0(df$fua_id, df$parent)
df$count2 = ave(df$count, df$ID, FUN = sum)
# need pop country
df = unique(df[, c("fua_id", "fua_name", "count2", "parent", "pop")])
dff = df
### here pc
df$count2 = df$count2/df$pop
dfa = subset (df, df$parent == "Digital transition")[, c("fua_id", "fua_name", "count2")]
dfa$random = sample(seq(from = 0, to = 1, by = 0.001), size = nrow(dfa), replace = TRUE)
dfa$rank = rank(-dfa$count2+dfa$random)
dfa$period = 1
dfb = subset (df, df$parent == "Green transition")[, c("fua_id", "fua_name", "count2")]
dfb$random = sample(seq(from = 0, to = 1, by = 0.001), size = nrow(dfb), replace = TRUE)
dfb$rank = rank(-dfb$count2+dfb$random)
dfb$period = 2
df3= rbind (dfa, dfb)
df3$id = df3$fua_name
df3$year = df3$period
#df3$rank = round(df3$rank, digits = 0)
df3$label = df3$fua_name
df3$parent = "hello"
df3$color = "blue"
df3$ctry = substr(df3$fua_id, 0, 2)
df3$parent = df3$ctry
df3$color = "red"
df3$color[df3$ctry == "CN"] = "red"
df3$color[df3$ctry == "MY"] = "black"
df3$color[df3$ctry == "VN"] = "pink"
df3$color[df3$ctry == "ID"] = "grey"
df3$color[df3$ctry == "JP"] = "blue"
df3$color[df3$ctry == "KP"] = "yellow"
df3$color[df3$ctry == "KH"] = "orange"
df3$color[df3$ctry == "KR"] = "lightblue"
df3$color[df3$ctry == "LA"] = "lightpink"
df3$color[df3$ctry == "TH"] = "lightorange"
df3$color[df3$ctry == "TW"] = "lightgrey"
df3$color[df3$ctry == "SG"] = "purple"
df3$color[df3$ctry == "MM"] = "brown"
df3$color[df3$ctry == "MN"] = "darkgreen"
df3$color[df3$ctry == "PH"] = "green"
df3$color[df3$ctry == "HK"] = "darkgrey"
df3$color[df3$ctry == "MO"] = "darkblue"
df3 = subset(df3, df3$count2>0)
df3 = subset(df3, df3$rank<40)
# load different parts of html
setwd("C:/Dropbox/2-private/1-asg/1-production/2-code/bump")
p1 = paste(readLines("part-1.html"), collapse="\n") #before json data
p3 = paste(readLines("part-3.html"), collapse="\n") #after json data
p2 = toJSON(df3)
all = paste (p1, p2, p3, collapse="\n")
setwd("C:/Dropbox/2-private/1-asg/1-production/3-projects/0-twin-transition/3-outputs-wb/dig-green-leaders")
writeLines(all, paste0("dig-green-leaders-ctry-pc.html"))
### BUBBLE CHART
df = dff
### here pc
df$count2 = df$count2/df$pop
df = subset (df, df$count2>0)
df$ctry = substr(df$fua_id, 0, 2)
df$fua_name = paste0(df$fua_name, " (", df$ctry, ")")
df$color = "red"
df$color[df$ctry == "CN"] = "red"
df$color[df$ctry == "MY"] = "black"
df$color[df$ctry == "VN"] = "pink"
df$color[df$ctry == "ID"] = "grey"
df$color[df$ctry == "JP"] = "blue"
df$color[df$ctry == "KP"] = "yellow"
df$color[df$ctry == "KH"] = "orange"
df$color[df$ctry == "KR"] = "lightblue"
df$color[df$ctry == "LA"] = "lightpink"
df$color[df$ctry == "TH"] = "lightorange"
df$color[df$ctry == "TW"] = "lightgrey"
df$color[df$ctry == "SG"] = "purple"
df$color[df$ctry == "MM"] = "brown"
df$color[df$ctry == "MN"] = "darkgreen"
df$color[df$ctry == "PH"] = "green"
df$color[df$ctry == "HK"] = "darkgrey"
df$color[df$ctry == "MO"] = "darkblue"
dfa = subset (df, df$parent == "Digital transition")[, c("fua_id", "fua_name", "count2", "ctry", "color")]
#dfa$random = sample(seq(from = 0, to = 1, by = 0.001), size = nrow(dfa), replace = TRUE)
dfa$random = 0
dfa$rank.dig = rank(-dfa$count2+dfa$random)
dfa$period = 1
dfa = dfa[, c("fua_id", "fua_name", "rank.dig", "ctry", "color")]
dfb = subset (df, df$parent == "Green transition")[, c("fua_id", "fua_name", "count2")]
dfb$random = 0
dfb$rank.green = rank(-dfb$count2+dfb$random)
dfb$period = 2
dfb = dfb[, c("fua_id", "rank.green")]
df = merge (dfa, dfb, by = "fua_id")
df$parent=df$ctry
# load different parts of html
setwd("C:/Dropbox/2-private/1-asg/1-production/2-code/smart/wb-asia")
p1 = paste(readLines("part-1.html"), collapse="\n") #before json data
p3 = paste(readLines("part-3.html"), collapse="\n") #after json data
df$value = 1
df$id = df$fua_id
df$x = -df$rank.dig
df$y = -df$rank.green
df = subset (df, df$x>-180)
df = subset (df, df$y>-180)
df$count = 1
df = unique(df[,  c("parent", "id", "value", "color", "x", "y", "count", "fua_name")])
df = df[complete.cases(df),]
p2 = toJSON(df)
all = paste (p1, p2, p3, collapse="\n")
setwd("C:/Dropbox/2-private/1-asg/1-production/3-projects/0-twin-transition/3-outputs-wb/dig-green-leaders")
writeLines(all, paste0("bub-chart-ctry-pc.html"))
### top
df = subset (df, df$x>-80)
df = subset (df, df$y>-80)
df$count = 1
df = unique(df[,  c("parent", "id", "value", "color", "x", "y", "count", "fua_name")])
df = df[complete.cases(df),]
p2 = toJSON(df)
all = paste (p1, p2, p3, collapse="\n")
setwd("C:/Dropbox/2-private/1-asg/1-production/3-projects/0-twin-transition/3-outputs-wb/dig-green-leaders")
writeLines(all, paste0("bub-chart-top-ctry-pc.html"))
options(stringsAsFactors=FALSE)
library(jsonlite)
library(EconGeo)
library(RColorBrewer)
library(DT)
library (stringr)
library (dplyr)
dir = "C:/Dropbox/2-private/1-asg/1-production/3-projects/0-twin-transition/3-outputs-wb"
setwd("C:/Dropbox/2-private/1-asg/1-production/2-code")
source("rescale.R")
# load different parts of html
setwd("C:/Dropbox/2-private/1-asg/1-production/2-code/smart")
p1 = paste(readLines("part-1.html"), collapse="\n") #before json data
p3 = paste(readLines("part-3.html"), collapse="\n") #after json data
# read
setwd(paste0(dir, "/2-analysis"))
df = read.csv2 ("fua-tech-4d.csv")
# load map names and lat/long
setwd("C:/Dropbox/2-private/1-asg/1-production/3-projects/0-twin-transition/3-outputs-wb/maps-points/_data")
coords = fromJSON("asia-world-urban-areas.json")
# load crosswalk & merge
wua = read.csv2 ("asia-wua-fua-crosswalk.csv")[, c("slug", "fua_id")]
coords = merge (coords, wua, by = "slug")
# merge with patent data
df = merge (df, coords, by = "fua_id")
df$fua_name=df$city
df$pop = df$population
# merge to get parent
setwd(paste0("C:/Dropbox/2-private/1-asg/1-production/3-projects/0-twin-transition/1-data"))
df2 = read.csv ("crosswalk.csv", sep = ";", header = T)[, c("parent", "priority")]
df2 = df2 %>% distinct ()
df = merge(df, df2, by.x = "tech", by.y = "priority", all = F)
df$ID = paste0(df$fua_id, df$parent)
df$count2 = ave(df$count, df$ID, FUN = sum)
df = unique(df[, c("fua_id", "fua_name", "count2", "parent", "pop")])
ctries = c("CN", "ID", "JP", "KP", "KH", "KR", "LA",
"MN", "MM", "MY", "PH", "SG", "TH", "TW", "VN", "MO", "HK")
df$c = substr(df$fua_id, 0, 2)
df = subset (df, df$c %in% ctries)
df$c = NULL
dff = df
View(df)
### here pc
df$count2 = df$count2/df$pop
options(stringsAsFactors=FALSE)
library(jsonlite)
library(EconGeo)
library(RColorBrewer)
library(DT)
library (stringr)
library (dplyr)
dir = "C:/Dropbox/2-private/1-asg/1-production/3-projects/0-twin-transition/3-outputs-wb"
setwd("C:/Dropbox/2-private/1-asg/1-production/2-code")
source("rescale.R")
# load different parts of html
setwd("C:/Dropbox/2-private/1-asg/1-production/2-code/smart")
p1 = paste(readLines("part-1.html"), collapse="\n") #before json data
p3 = paste(readLines("part-3.html"), collapse="\n") #after json data
# read
setwd(paste0(dir, "/2-analysis"))
df = read.csv2 ("fua-tech-4d.csv")
# load map names and lat/long
setwd("C:/Dropbox/2-private/1-asg/1-production/3-projects/0-twin-transition/3-outputs-wb/maps-points/_data")
coords = fromJSON("asia-world-urban-areas.json")
# load crosswalk & merge
wua = read.csv2 ("asia-wua-fua-crosswalk.csv")[, c("slug", "fua_id")]
coords = merge (coords, wua, by = "slug")
# merge with patent data
df = merge (df, coords, by = "fua_id")
df$fua_name=df$city
df$pop = df$population
# merge to get parent
setwd(paste0("C:/Dropbox/2-private/1-asg/1-production/3-projects/0-twin-transition/1-data"))
df2 = read.csv ("crosswalk.csv", sep = ";", header = T)[, c("parent", "priority")]
df2 = df2 %>% distinct ()
df = merge(df, df2, by.x = "tech", by.y = "priority", all = F)
df$ID = paste0(df$fua_id, df$parent)
df$count2 = ave(df$count, df$ID, FUN = sum)
df = unique(df[, c("fua_id", "fua_name", "count2", "parent", "pop")])
ctries = c("CN", "ID", "JP", "KP", "KH", "KR", "LA",
"MN", "MM", "MY", "PH", "SG", "TH", "TW", "VN", "MO", "HK")
df$c = substr(df$fua_id, 0, 2)
df = subset (df, df$c %in% ctries)
df$c = NULL
dff = df
### here pc
df$count2 = df$count2/df$pop
dfa = subset (df, df$parent == "Digital transition")[, c("fua_id", "fua_name", "count2")]
dfa$random = sample(seq(from = 0, to = 1, by = 0.001), size = nrow(dfa), replace = TRUE)
dfa$rank = rank(-dfa$count2+dfa$random)
dfa$period = 1
dfb = subset (df, df$parent == "Green transition")[, c("fua_id", "fua_name", "count2")]
dfb$random = sample(seq(from = 0, to = 1, by = 0.001), size = nrow(dfb), replace = TRUE)
dfb$rank = rank(-dfb$count2+dfb$random)
dfb$period = 2
df3= rbind (dfa, dfb)
df3$id = df3$fua_name
df3$year = df3$period
#df3$rank = round(df3$rank, digits = 0)
df3$label = df3$fua_name
df3$parent = "hello"
df3$color = "blue"
df3$ctry = substr(df3$fua_id, 0, 2)
df3$parent = df3$ctry
df3$color[df3$ctry == "CN"] = "red"
df3$color[df3$ctry == "MY"] = "black"
df3$color[df3$ctry == "VN"] = "pink"
df3$color[df3$ctry == "ID"] = "grey"
df3$color[df3$ctry == "JP"] = "blue"
df3$color[df3$ctry == "KP"] = "yellow"
df3$color[df3$ctry == "KH"] = "orange"
df3$color[df3$ctry == "KR"] = "black"
df3$color[df3$ctry == "LA"] = "pink"
df3 = subset(df3, df3$count2>0)
df3 = subset(df3, df3$rank<40)
# load different parts of html
setwd("C:/Dropbox/2-private/1-asg/1-production/2-code/bump")
p1 = paste(readLines("part-1.html"), collapse="\n") #before json data
p3 = paste(readLines("part-3.html"), collapse="\n") #after json data
p2 = toJSON(df3)
all = paste (p1, p2, p3, collapse="\n")
setwd("C:/Dropbox/2-private/1-asg/1-production/3-projects/0-twin-transition/3-outputs-wb/dig-green-leaders")
writeLines(all, paste0("dig-green-leaders-pc.html"))
### BUBBLE CHART
df = dff
### here pc
df = subset (df, df$count2>2)
df$count2 = df$count2/df$pop
df$ctry = substr(df$fua_id, 0, 2)
df$fua_name = paste0(df$fua_name, " (", df$ctry, ")")
df$color = "red"
df$color[df$ctry == "CN"] = "red"
df$color[df$ctry == "MY"] = "black"
df$color[df$ctry == "VN"] = "pink"
df$color[df$ctry == "ID"] = "grey"
df$color[df$ctry == "JP"] = "blue"
df$color[df$ctry == "KP"] = "yellow"
df$color[df$ctry == "KH"] = "orange"
df$color[df$ctry == "KR"] = "lightblue"
df$color[df$ctry == "LA"] = "lightpink"
df$color[df$ctry == "TH"] = "lightorange"
df$color[df$ctry == "TW"] = "lightgrey"
df$color[df$ctry == "SG"] = "purple"
df$color[df$ctry == "MM"] = "brown"
df$color[df$ctry == "MN"] = "darkgreen"
df$color[df$ctry == "PH"] = "green"
dfa = subset (df, df$parent == "Digital transition")[, c("fua_id", "fua_name", "count2", "ctry", "color")]
#dfa$random = sample(seq(from = 0, to = 1, by = 0.001), size = nrow(dfa), replace = TRUE)
dfa$random = 0
dfa$rank.dig = rank(-dfa$count2+dfa$random)
dfa$period = 1
dfa = dfa[, c("fua_id", "fua_name", "rank.dig", "ctry", "color")]
dfb = subset (df, df$parent == "Green transition")[, c("fua_id", "fua_name", "count2")]
dfb$random = 0
dfb$rank.green = rank(-dfb$count2+dfb$random)
dfb$period = 2
dfb = dfb[, c("fua_id", "rank.green")]
df = merge (dfa, dfb, by = "fua_id")
df$parent=df$ctry
# load different parts of html
setwd("C:/Dropbox/2-private/1-asg/1-production/2-code/smart/wb-asia")
p1 = paste(readLines("part-1.html"), collapse="\n") #before json data
p3 = paste(readLines("part-3.html"), collapse="\n") #after json data
df$value = 1
df$id = df$fua_id
df$x = -df$rank.dig
df$y = -df$rank.green
df = subset (df, df$x>-180)
df = subset (df, df$y>-180)
df$count = 1
var = c("parent", "id", "value", "color", "x", "y", "count", "fua_name")
df = unique(df[, var])
df = df[complete.cases(df),]
p2 = toJSON(df)
all = paste (p1, p2, p3, collapse="\n")
setwd("C:/Dropbox/2-private/1-asg/1-production/3-projects/0-twin-transition/3-outputs-wb/dig-green-leaders")
writeLines(all, paste0("bub-chart-pc.html"))
### top
df = subset (df, df$x>-80)
df = subset (df, df$y>-80)
df$count = 1
var = c("parent", "id", "value", "color", "x", "y", "count", "fua_name")
df = unique(df[, var])
df = df[complete.cases(df),]
p2 = toJSON(df)
all = paste (p1, p2, p3, collapse="\n")
setwd("C:/Dropbox/2-private/1-asg/1-production/3-projects/0-twin-transition/3-outputs-wb/dig-green-leaders")
writeLines(all, paste0("bub-chart-top-pc.html"))
library (EconGeo)
library(Hmisc)
library(dplyr)
dir = "C:/Dropbox/2-private/1-asg/1-production/3-projects/6-bertelsmann-stiftung"
setwd("C:/Dropbox/2-private/1-asg/1-production/2-code/d3plus-geomap")
source ("d3plus.geomap.R")
library(EconGeo)
library(Hmisc)
library(dplyr)
library(jsonlite)
# read data
### NET
setwd(paste0(dir, "/3-outputs"))
df = read.csv2("untapped-4.csv")
# test with other untapped
test = read.csv2("untapped-3.csv")[, c("reg1", "reg2", "tech", "untapped")]
test <- merge(test, df, by = c("reg1", "reg2", "tech"), using = "data.table")
cor(test$untapped.x, test$untapped.y)
test = subset (df, df$tech == "Photonics")
df$value = df$untapped
df$id = paste0(df$name.y, "(", df$reg2, ")")
df$name = paste0(df$name.y, "(", df$reg2, ")")
df$y = df$rscount
df$x = df$rspred
df$parent = df$tech
df$color = "green"
i = paste0(df$reg1, df$tech)
i = iconv(i, to = 'ASCII//TRANSLIT')
i = gsub(" ", "-", i, fixed = TRUE)
i = gsub("/", "-", i, fixed = TRUE)
i = gsub(",", "-", i, fixed = TRUE)
i = gsub("(", "-", i, fixed = TRUE)
i = gsub(")", "", i, fixed = TRUE)
i = gsub("--", "-", i, fixed = TRUE)
i = gsub("-.", ".", i, fixed = TRUE)
i = tolower (i)
df$CID = i
head(df)
subsub = subset (df, df$reg1 == 'DE93')
View(subsub)
df$CID = i
cidlist = c("be33photonics",
"fi195g",
"dea5hydrogen",
"es61virtual-reality-and-augmented-reality",
"pl21autonomous-mobility",
"de93waste-management",
"de93advanced-materials-nanomaterials")
for (i in cidlist) {
df2 = subset (df, df$CID == i)
df2$value[df2$count>0]=100 # value untapped
df2$status = paste0("Unrealized potential = ", df2$untapped)
df2$status[df2$count>0] = paste0("Number of links = ", df2$count[df2$count>0])
df2 = subset (df2, df2$id != "EL62")
df2 = subset (df2, df2$id != "ES64")
df2$nuts2 = df2$reg2
df2$nuts_name = df2$name.y
df2$id = df2$reg2
#c("nuts2", "nuts2_name", "tech", "count", "rca", "rel", "comp", "name", "parent", "id", "value")
df2 = toJSON(df2)
setwd("C:/Dropbox/2-private/PABalland.github.io/asg/bertelsmann-stiftung/json")
write(df2, paste0("untapped-map-", i,  ".json"))
#values = paste0("https://www.paballand.com/asg/bertelsmann-stiftung/json/", paste0("untapped-map-", i,  ".json"))
#topo = "https://www.paballand.com/json/topojson/NUTS_RG_20M_2010_4326-nuts-2-regpat.json"
#dir2 = paste0(dir, "/3-outputs/8-untapped-maps")
#as = paste0("untapped-map-", i)
#d3plus.geomap(sourcehtml = "C:/Dropbox/2-private/1-asg/1-production/2-code/d3plus-geomap/_source",
# topo, values,
#dir = dir2,
# as = as)
}
i
df2 = subset (df, df$CID == i)
max(df2$value)
cidlist = c("be33photonics",
"fi195g",
"dea5hydrogen",
"es61virtual-reality-and-augmented-reality",
"pl21autonomous-mobility",
"de93waste-management",
"de93advanced-materials-nanomaterials")
for (i in cidlist) {
df2 = subset (df, df$CID == i)
df2$value[df2$count>0]=max(df2$value)*2 # value untapped
df2$status = paste0("Unrealized potential = ", df2$untapped)
df2$status[df2$count>0] = paste0("Number of links = ", df2$count[df2$count>0])
df2 = subset (df2, df2$id != "EL62")
df2 = subset (df2, df2$id != "ES64")
df2$nuts2 = df2$reg2
df2$nuts_name = df2$name.y
df2$id = df2$reg2
#c("nuts2", "nuts2_name", "tech", "count", "rca", "rel", "comp", "name", "parent", "id", "value")
df2 = toJSON(df2)
setwd("C:/Dropbox/2-private/PABalland.github.io/asg/bertelsmann-stiftung/json")
write(df2, paste0("untapped-map-", i,  ".json"))
#values = paste0("https://www.paballand.com/asg/bertelsmann-stiftung/json/", paste0("untapped-map-", i,  ".json"))
#topo = "https://www.paballand.com/json/topojson/NUTS_RG_20M_2010_4326-nuts-2-regpat.json"
#dir2 = paste0(dir, "/3-outputs/8-untapped-maps")
#as = paste0("untapped-map-", i)
#d3plus.geomap(sourcehtml = "C:/Dropbox/2-private/1-asg/1-production/2-code/d3plus-geomap/_source",
# topo, values,
#dir = dir2,
# as = as)
}
