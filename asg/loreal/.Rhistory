# convert to JSON
p2 = toJSON(nodes, encoding = "latin-ascii")
p2 = gsub('"x"', 'x', p2) # remove quotes that cause a pb
p2 = gsub('"y"', 'y', p2) # remove quotes that cause a pb
p4 = toJSON(links)
p4 = gsub('"', '', p4) # remove quotes that cause a pb
all = paste (p1, p2, p3, p4, p5, collapse="\n")
# save tech space
setwd(paste0(dir, "3-outputs//technology-space"))
writeLines(all, ("tech-space.html"))
setwd(paste0(dir2))
writeLines(all, ("tech-space.html"))
options(stringsAsFactors=FALSE)
library(jsonlite)
library(EconGeo)
library(RColorBrewer)
library(igraph)
library(qgraph)
dir = "D:/Dropbox/2-private/1-asg/Projects/3-l'oréal/"
dir2 = "D:/Dropbox/2-private/PABalland.github.io/asg/loreal/"
# extract s3 fields
# read crosswalk
setwd(paste0(dir, "1-data"))
d = read.csv("0-S3-CPC.csv", sep = ";", check.names = F)
colnames (d) = c("KIA",	"S3",	"CPC",	"Description")
s3 = unique (d[, c("KIA",	"S3")])
s3$id = as.numeric(factor (unique (s3$S3)))
# load different parts of html
setwd(paste0(dir, "3-outputs/technology-space/_source"))
p1 = paste(readLines("graph-part-1.html"), collapse="\n") #before json data
p3 = paste(readLines("graph-part-3.html"), collapse="\n") #after json data
p5 = paste(readLines("graph-part-5.html"), collapse="\n") #before json data
# load relatedness scores
setwd(paste0(dir, "2-analysis"))
df = as.matrix(read.csv2("2-relatedness-co-occ-co-class.p4.csv",
header = T,
check.names = F,
row.names = 1))
# subselect
df[lower.tri(df)] <- NA
df = get.list (df)
df = subset (df, df$Region %in% s3$S3)
df = subset (df, df$Industry %in% s3$S3)
# select nb links max
n = 4
edges = df
colnames (edges) = c("source", "target", "weight")
df = NULL
for (i in unique (edges$source)) {
df2 =subset (edges, edges$source == i | edges$target == i)
df2 = df2[order(-df2$weight),]
df2 = df2[1:n, ]
df = rbind (df, df2)
}
df = unique (df)
df = subset (df, df$weight>0)
# make igraph object
df2 = merge (df, s3, by.x = "source", by.y = "S3")
df2 = merge (df2, s3, by.x = "target", by.y = "S3")
df2 = df2[, c("id.x", "id.y", "weight")]
colnames (df2) = c("source", "target", "weight")
g <- graph_from_data_frame(d = df2, directed = F)
plot (g)
e = g
e <- get.edgelist(e)
e = cbind (as.numeric (e[1:dim(e)[1]]), as.numeric (e[dim(e)[1]:dim(e)[1]*2])) #
set.seed(20)
l <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))
plot(g,layout=l,vertex.size=4,vertex.label=NA)
# V2
l2 = layout.fruchterman.reingold(g)
set.seed(10)
coords <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))
nodes =  data.frame (
id2 = 1:18,
x = qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))[,1],
y = qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))[,2])
#v2
set.seed(3)
nodes =  data.frame (
id2 = 1:18,
x = layout.fruchterman.reingold(g)[,1],
y = layout.fruchterman.reingold(g)[,2])
# add s3 info
nodes = merge (nodes, s3, by.x = "id2", by.y = "id", all = T)
nodes$parent = nodes$KIA
nodes$color[nodes$parent == "Artificial intelligence"] = "blue"
nodes$color[nodes$parent == "Biotechnology"] = "green"
nodes$color[nodes$parent == "Internet of things"] = "red"
nodes$id = nodes$S3
V(g)$name = as.numeric (V(g)$name) - 1
links = as.data.frame (cbind(get.edgelist(g), round(E(g)$weight, 3)))
links = links[,1:2]
colnames (links) = c("source", "target")
# change name
nodes$id = iconv(nodes$id, to = 'ASCII//TRANSLIT')
nodes$x[nodes$S3 == "White biotechnology - industrial biotechnology"] = -4
nodes$y[nodes$S3 == "White biotechnology - industrial biotechnology"] = 0
nodes$x[nodes$S3 == "Natural language processing"] = -2
nodes$y[nodes$S3 == "Natural language processing"] = -2
# convert to JSON
p2 = toJSON(nodes, encoding = "latin-ascii")
p2 = gsub('"x"', 'x', p2) # remove quotes that cause a pb
p2 = gsub('"y"', 'y', p2) # remove quotes that cause a pb
p4 = toJSON(links)
p4 = gsub('"', '', p4) # remove quotes that cause a pb
all = paste (p1, p2, p3, p4, p5, collapse="\n")
# save tech space
setwd(paste0(dir, "3-outputs//technology-space"))
writeLines(all, ("tech-space.html"))
setwd(paste0(dir2))
writeLines(all, ("tech-space.html"))
options(stringsAsFactors=FALSE)
library(jsonlite)
library(EconGeo)
library(RColorBrewer)
library(igraph)
library(qgraph)
dir = "D:/Dropbox/2-private/1-asg/Projects/3-l'oréal/"
dir2 = "D:/Dropbox/2-private/PABalland.github.io/asg/loreal/"
# extract s3 fields
# read crosswalk
setwd(paste0(dir, "1-data"))
d = read.csv("0-S3-CPC.csv", sep = ";", check.names = F)
colnames (d) = c("KIA",	"S3",	"CPC",	"Description")
s3 = unique (d[, c("KIA",	"S3")])
s3$id = as.numeric(factor (unique (s3$S3)))
# load different parts of html
setwd(paste0(dir, "3-outputs/technology-space/_source"))
p1 = paste(readLines("graph-part-1.html"), collapse="\n") #before json data
p3 = paste(readLines("graph-part-3.html"), collapse="\n") #after json data
p5 = paste(readLines("graph-part-5.html"), collapse="\n") #before json data
# load relatedness scores
setwd(paste0(dir, "2-analysis"))
df = as.matrix(read.csv2("2-relatedness-co-occ-co-class.p4.csv",
header = T,
check.names = F,
row.names = 1))
# subselect
df[lower.tri(df)] <- NA
df = get.list (df)
df = subset (df, df$Region %in% s3$S3)
df = subset (df, df$Industry %in% s3$S3)
# select nb links max
n = 4
edges = df
colnames (edges) = c("source", "target", "weight")
df = NULL
for (i in unique (edges$source)) {
df2 =subset (edges, edges$source == i | edges$target == i)
df2 = df2[order(-df2$weight),]
df2 = df2[1:n, ]
df = rbind (df, df2)
}
df = unique (df)
df = subset (df, df$weight>0)
# make igraph object
df2 = merge (df, s3, by.x = "source", by.y = "S3")
df2 = merge (df2, s3, by.x = "target", by.y = "S3")
df2 = df2[, c("id.x", "id.y", "weight")]
colnames (df2) = c("source", "target", "weight")
g <- graph_from_data_frame(d = df2, directed = F)
plot (g)
e = g
e <- get.edgelist(e)
e = cbind (as.numeric (e[1:dim(e)[1]]), as.numeric (e[dim(e)[1]:dim(e)[1]*2])) #
set.seed(20)
l <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))
plot(g,layout=l,vertex.size=4,vertex.label=NA)
# V2
l2 = layout.fruchterman.reingold(g)
set.seed(10)
coords <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))
nodes =  data.frame (
id2 = 1:18,
x = qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))[,1],
y = qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))[,2])
#v2
set.seed(4)
nodes =  data.frame (
id2 = 1:18,
x = layout.fruchterman.reingold(g)[,1],
y = layout.fruchterman.reingold(g)[,2])
# add s3 info
nodes = merge (nodes, s3, by.x = "id2", by.y = "id", all = T)
nodes$parent = nodes$KIA
nodes$color[nodes$parent == "Artificial intelligence"] = "blue"
nodes$color[nodes$parent == "Biotechnology"] = "green"
nodes$color[nodes$parent == "Internet of things"] = "red"
nodes$id = nodes$S3
V(g)$name = as.numeric (V(g)$name) - 1
links = as.data.frame (cbind(get.edgelist(g), round(E(g)$weight, 3)))
links = links[,1:2]
colnames (links) = c("source", "target")
# change name
nodes$id = iconv(nodes$id, to = 'ASCII//TRANSLIT')
nodes$x[nodes$S3 == "White biotechnology - industrial biotechnology"] = -4
nodes$y[nodes$S3 == "White biotechnology - industrial biotechnology"] = 0
nodes$x[nodes$S3 == "Natural language processing"] = -2
nodes$y[nodes$S3 == "Natural language processing"] = -2
# convert to JSON
p2 = toJSON(nodes, encoding = "latin-ascii")
p2 = gsub('"x"', 'x', p2) # remove quotes that cause a pb
p2 = gsub('"y"', 'y', p2) # remove quotes that cause a pb
p4 = toJSON(links)
p4 = gsub('"', '', p4) # remove quotes that cause a pb
all = paste (p1, p2, p3, p4, p5, collapse="\n")
# save tech space
setwd(paste0(dir, "3-outputs//technology-space"))
writeLines(all, ("tech-space.html"))
setwd(paste0(dir2))
writeLines(all, ("tech-space.html"))
options(stringsAsFactors=FALSE)
library(jsonlite)
library(EconGeo)
library(RColorBrewer)
library(igraph)
library(qgraph)
dir = "D:/Dropbox/2-private/1-asg/Projects/3-l'oréal/"
dir2 = "D:/Dropbox/2-private/PABalland.github.io/asg/loreal/"
# extract s3 fields
# read crosswalk
setwd(paste0(dir, "1-data"))
d = read.csv("0-S3-CPC.csv", sep = ";", check.names = F)
colnames (d) = c("KIA",	"S3",	"CPC",	"Description")
s3 = unique (d[, c("KIA",	"S3")])
s3$id = as.numeric(factor (unique (s3$S3)))
# load different parts of html
setwd(paste0(dir, "3-outputs/technology-space/_source"))
p1 = paste(readLines("graph-part-1.html"), collapse="\n") #before json data
p3 = paste(readLines("graph-part-3.html"), collapse="\n") #after json data
p5 = paste(readLines("graph-part-5.html"), collapse="\n") #before json data
# load relatedness scores
setwd(paste0(dir, "2-analysis"))
df = as.matrix(read.csv2("2-relatedness-co-occ-co-class.p4.csv",
header = T,
check.names = F,
row.names = 1))
# subselect
df[lower.tri(df)] <- NA
df = get.list (df)
df = subset (df, df$Region %in% s3$S3)
df = subset (df, df$Industry %in% s3$S3)
# select nb links max
n = 4
edges = df
colnames (edges) = c("source", "target", "weight")
df = NULL
for (i in unique (edges$source)) {
df2 =subset (edges, edges$source == i | edges$target == i)
df2 = df2[order(-df2$weight),]
df2 = df2[1:n, ]
df = rbind (df, df2)
}
df = unique (df)
df = subset (df, df$weight>0)
# make igraph object
df2 = merge (df, s3, by.x = "source", by.y = "S3")
df2 = merge (df2, s3, by.x = "target", by.y = "S3")
df2 = df2[, c("id.x", "id.y", "weight")]
colnames (df2) = c("source", "target", "weight")
g <- graph_from_data_frame(d = df2, directed = F)
plot (g)
e = g
e <- get.edgelist(e)
e = cbind (as.numeric (e[1:dim(e)[1]]), as.numeric (e[dim(e)[1]:dim(e)[1]*2])) #
set.seed(20)
l <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))
plot(g,layout=l,vertex.size=4,vertex.label=NA)
# V2
l2 = layout.fruchterman.reingold(g)
set.seed(10)
coords <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))
nodes =  data.frame (
id2 = 1:18,
x = qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))[,1],
y = qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))[,2])
#v2
set.seed(5)
nodes =  data.frame (
id2 = 1:18,
x = layout.fruchterman.reingold(g)[,1],
y = layout.fruchterman.reingold(g)[,2])
# add s3 info
nodes = merge (nodes, s3, by.x = "id2", by.y = "id", all = T)
nodes$parent = nodes$KIA
nodes$color[nodes$parent == "Artificial intelligence"] = "blue"
nodes$color[nodes$parent == "Biotechnology"] = "green"
nodes$color[nodes$parent == "Internet of things"] = "red"
nodes$id = nodes$S3
V(g)$name = as.numeric (V(g)$name) - 1
links = as.data.frame (cbind(get.edgelist(g), round(E(g)$weight, 3)))
links = links[,1:2]
colnames (links) = c("source", "target")
# change name
nodes$id = iconv(nodes$id, to = 'ASCII//TRANSLIT')
nodes$x[nodes$S3 == "White biotechnology - industrial biotechnology"] = -4
nodes$y[nodes$S3 == "White biotechnology - industrial biotechnology"] = 0
nodes$x[nodes$S3 == "Natural language processing"] = -2
nodes$y[nodes$S3 == "Natural language processing"] = -2
# convert to JSON
p2 = toJSON(nodes, encoding = "latin-ascii")
p2 = gsub('"x"', 'x', p2) # remove quotes that cause a pb
p2 = gsub('"y"', 'y', p2) # remove quotes that cause a pb
p4 = toJSON(links)
p4 = gsub('"', '', p4) # remove quotes that cause a pb
all = paste (p1, p2, p3, p4, p5, collapse="\n")
# save tech space
setwd(paste0(dir, "3-outputs//technology-space"))
writeLines(all, ("tech-space.html"))
setwd(paste0(dir2))
writeLines(all, ("tech-space.html"))
options(stringsAsFactors=FALSE)
library(jsonlite)
library(EconGeo)
library(RColorBrewer)
library(igraph)
library(qgraph)
dir = "D:/Dropbox/2-private/1-asg/Projects/3-l'oréal/"
dir2 = "D:/Dropbox/2-private/PABalland.github.io/asg/loreal/"
# extract s3 fields
# read crosswalk
setwd(paste0(dir, "1-data"))
d = read.csv("0-S3-CPC.csv", sep = ";", check.names = F)
colnames (d) = c("KIA",	"S3",	"CPC",	"Description")
s3 = unique (d[, c("KIA",	"S3")])
s3$id = as.numeric(factor (unique (s3$S3)))
# load different parts of html
setwd(paste0(dir, "3-outputs/technology-space/_source"))
p1 = paste(readLines("graph-part-1.html"), collapse="\n") #before json data
p3 = paste(readLines("graph-part-3.html"), collapse="\n") #after json data
p5 = paste(readLines("graph-part-5.html"), collapse="\n") #before json data
# load relatedness scores
setwd(paste0(dir, "2-analysis"))
df = as.matrix(read.csv2("2-relatedness-co-occ-co-class.p4.csv",
header = T,
check.names = F,
row.names = 1))
# subselect
df[lower.tri(df)] <- NA
df = get.list (df)
df = subset (df, df$Region %in% s3$S3)
df = subset (df, df$Industry %in% s3$S3)
# select nb links max
n = 4
edges = df
colnames (edges) = c("source", "target", "weight")
df = NULL
for (i in unique (edges$source)) {
df2 =subset (edges, edges$source == i | edges$target == i)
df2 = df2[order(-df2$weight),]
df2 = df2[1:n, ]
df = rbind (df, df2)
}
df = unique (df)
df = subset (df, df$weight>0)
# make igraph object
df2 = merge (df, s3, by.x = "source", by.y = "S3")
df2 = merge (df2, s3, by.x = "target", by.y = "S3")
df2 = df2[, c("id.x", "id.y", "weight")]
colnames (df2) = c("source", "target", "weight")
g <- graph_from_data_frame(d = df2, directed = F)
plot (g)
e = g
e <- get.edgelist(e)
e = cbind (as.numeric (e[1:dim(e)[1]]), as.numeric (e[dim(e)[1]:dim(e)[1]*2])) #
set.seed(20)
l <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))
plot(g,layout=l,vertex.size=4,vertex.label=NA)
# V2
l2 = layout.fruchterman.reingold(g)
set.seed(10)
coords <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))
nodes =  data.frame (
id2 = 1:18,
x = qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))[,1],
y = qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))[,2])
#v2
set.seed(6)
nodes =  data.frame (
id2 = 1:18,
x = layout.fruchterman.reingold(g)[,1],
y = layout.fruchterman.reingold(g)[,2])
# add s3 info
nodes = merge (nodes, s3, by.x = "id2", by.y = "id", all = T)
nodes$parent = nodes$KIA
nodes$color[nodes$parent == "Artificial intelligence"] = "blue"
nodes$color[nodes$parent == "Biotechnology"] = "green"
nodes$color[nodes$parent == "Internet of things"] = "red"
nodes$id = nodes$S3
V(g)$name = as.numeric (V(g)$name) - 1
links = as.data.frame (cbind(get.edgelist(g), round(E(g)$weight, 3)))
links = links[,1:2]
colnames (links) = c("source", "target")
# change name
nodes$id = iconv(nodes$id, to = 'ASCII//TRANSLIT')
nodes$x[nodes$S3 == "White biotechnology - industrial biotechnology"] = -4
nodes$y[nodes$S3 == "White biotechnology - industrial biotechnology"] = 0
nodes$x[nodes$S3 == "Natural language processing"] = -2
nodes$y[nodes$S3 == "Natural language processing"] = -2
# convert to JSON
p2 = toJSON(nodes, encoding = "latin-ascii")
p2 = gsub('"x"', 'x', p2) # remove quotes that cause a pb
p2 = gsub('"y"', 'y', p2) # remove quotes that cause a pb
p4 = toJSON(links)
p4 = gsub('"', '', p4) # remove quotes that cause a pb
all = paste (p1, p2, p3, p4, p5, collapse="\n")
# save tech space
setwd(paste0(dir, "3-outputs//technology-space"))
writeLines(all, ("tech-space.html"))
setwd(paste0(dir2))
writeLines(all, ("tech-space.html"))
options(stringsAsFactors=FALSE)
library(jsonlite)
library(EconGeo)
library(RColorBrewer)
library(igraph)
library(qgraph)
dir = "D:/Dropbox/2-private/1-asg/Projects/3-l'oréal/"
dir2 = "D:/Dropbox/2-private/PABalland.github.io/asg/loreal/"
# extract s3 fields
# read crosswalk
setwd(paste0(dir, "1-data"))
d = read.csv("0-S3-CPC.csv", sep = ";", check.names = F)
colnames (d) = c("KIA",	"S3",	"CPC",	"Description")
s3 = unique (d[, c("KIA",	"S3")])
s3$id = as.numeric(factor (unique (s3$S3)))
# load different parts of html
setwd(paste0(dir, "3-outputs/technology-space/_source"))
p1 = paste(readLines("graph-part-1.html"), collapse="\n") #before json data
p3 = paste(readLines("graph-part-3.html"), collapse="\n") #after json data
p5 = paste(readLines("graph-part-5.html"), collapse="\n") #before json data
# load relatedness scores
setwd(paste0(dir, "2-analysis"))
df = as.matrix(read.csv2("2-relatedness-co-occ-co-class.p4.csv",
header = T,
check.names = F,
row.names = 1))
# subselect
df[lower.tri(df)] <- NA
df = get.list (df)
df = subset (df, df$Region %in% s3$S3)
df = subset (df, df$Industry %in% s3$S3)
# select nb links max
n = 4
edges = df
colnames (edges) = c("source", "target", "weight")
df = NULL
for (i in unique (edges$source)) {
df2 =subset (edges, edges$source == i | edges$target == i)
df2 = df2[order(-df2$weight),]
df2 = df2[1:n, ]
df = rbind (df, df2)
}
df = unique (df)
df = subset (df, df$weight>0)
# make igraph object
df2 = merge (df, s3, by.x = "source", by.y = "S3")
df2 = merge (df2, s3, by.x = "target", by.y = "S3")
df2 = df2[, c("id.x", "id.y", "weight")]
colnames (df2) = c("source", "target", "weight")
g <- graph_from_data_frame(d = df2, directed = F)
plot (g)
e = g
e <- get.edgelist(e)
e = cbind (as.numeric (e[1:dim(e)[1]]), as.numeric (e[dim(e)[1]:dim(e)[1]*2])) #
set.seed(20)
l <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))
plot(g,layout=l,vertex.size=4,vertex.label=NA)
# V2
l2 = layout.fruchterman.reingold(g)
set.seed(10)
coords <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))
nodes =  data.frame (
id2 = 1:18,
x = qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))[,1],
y = qgraph.layout.fruchtermanreingold(e, vcount=vcount(g))[,2])
#v2
#set.seed(6)
#nodes =  data.frame (
#  id2 = 1:18,
#  x = layout.fruchterman.reingold(g)[,1],
#  y = layout.fruchterman.reingold(g)[,2])
# add s3 info
nodes = merge (nodes, s3, by.x = "id2", by.y = "id", all = T)
nodes$parent = nodes$KIA
nodes$color[nodes$parent == "Artificial intelligence"] = "blue"
nodes$color[nodes$parent == "Biotechnology"] = "green"
nodes$color[nodes$parent == "Internet of things"] = "red"
nodes$id = nodes$S3
V(g)$name = as.numeric (V(g)$name) - 1
links = as.data.frame (cbind(get.edgelist(g), round(E(g)$weight, 3)))
links = links[,1:2]
colnames (links) = c("source", "target")
# change name
nodes$id = iconv(nodes$id, to = 'ASCII//TRANSLIT')
nodes$x[nodes$S3 == "White biotechnology - industrial biotechnology"] = -4
nodes$y[nodes$S3 == "White biotechnology - industrial biotechnology"] = 0
nodes$x[nodes$S3 == "Natural language processing"] = -2
nodes$y[nodes$S3 == "Natural language processing"] = -2
# convert to JSON
p2 = toJSON(nodes, encoding = "latin-ascii")
p2 = gsub('"x"', 'x', p2) # remove quotes that cause a pb
p2 = gsub('"y"', 'y', p2) # remove quotes that cause a pb
p4 = toJSON(links)
p4 = gsub('"', '', p4) # remove quotes that cause a pb
all = paste (p1, p2, p3, p4, p5, collapse="\n")
# save tech space
setwd(paste0(dir, "3-outputs//technology-space"))
writeLines(all, ("tech-space.html"))
setwd(paste0(dir2))
writeLines(all, ("tech-space.html"))
