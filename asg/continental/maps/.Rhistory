(828+30+30)/0.920
(828+30+30)/9.20
(828+30+30)/92.0
(828+30+30)/89
4+8
7+8
11+7
11+8
5+2+3.8
10.8/2
425
#mur a bancher de 27;
tolower("RICHIESTA APERTURA APPARTAMENTO USO TURISTICO “alloggi brevi”")
22-4
1250
1450+
1750+
950+
650+
450+
0+
1500+
1250+
1250+
1200+
850+
400
1250+
1450+
1750+
1325 +
650+
450+
1500+
1250+
1250 +
1200 +
850 +
400
27307/5461
27307/5461.55
6375*0.2
6375*0.8
dir  = "D:/Dropbox/2-private/1-asg/1-production/2-continental" # for analysis
dir.regpat = "D:/Dropbox/2-private/1-asg/1-production/_DATA/PATENTS/REGPAT" # for latest regpat version
web = "D:/Dropbox/2-private/PABalland.github.io/asg/continental"
setwd(paste0(dir, "/3-outputs/maps"))
setwd(paste0(dir, "/3-outputs/maps/east-asia"))
setwd(paste0(dir, "/3-outputs/maps/north-america"))
setwd(paste0(dir, "/3-outputs/maps/europe"))
setwd(paste0(web, "/maps"))
setwd(paste0(web, "/maps/east-asia"))
setwd(paste0(web, "/maps/north-america"))
setwd(paste0(web, "/maps/europe"))
options(stringsAsFactors=FALSE)
library (jsonlite)
library (EconGeo)
library (RColorBrewer)
library (data.table)
library (dplyr)
rescale <- function(x) {
((x) - min(x, na.rm = TRUE))/(max(x, na.rm = TRUE) -
min(x, na.rm = TRUE)) * 100}
dir  = "D:/Dropbox/2-private/1-asg/1-production/2-continental" # for analysis
dir.regpat = "D:/Dropbox/2-private/1-asg/1-production/_DATA/PATENTS/REGPAT" # for latest regpat version
web = "D:/Dropbox/2-private/PABalland.github.io/asg/continental"
# load different parts of html
setwd("D:/Dropbox/2-private/1-asg/1-production/_SOURCE/maps/world-urban-areas")
p1 = paste(readLines("part-1.html"), collapse="\n") #before json data
p3 = paste(readLines("part-3.html"), collapse="\n") #after json data
p3.asia = paste(readLines("part-3-east-asia.html"), collapse="\n") #after json data
p3.northam = paste(readLines("part-3-north-america.html"), collapse="\n") #after json data
p3.eu = paste(readLines("part-3-europe.html"), collapse="\n") #after json data
# read geography of prio
setwd(paste0(dir, "/2-analysis"))
df = read.csv2 ("fua-tech-4d.csv", sep = ";", header = T)
# remove non prio
df$nbdig = nchar(gsub("[^0-9]+", "", df$tech))
df = subset (df, df$nbdig==0)
df$nbdig = NULL
# merge to get wuaid (needed for the map)
setwd("D:/Dropbox/2-private/1-asg/1-production/_SOURCE/maps/world-urban-areas")
wua = unique(read.csv2 ("wua-fua-crosswalk.csv"))[, c("wua_id", "fua_id")]
wua <- wua[complete.cases(wua),]
# merge
df = merge (df, wua, by = "fua_id")
df$id = df$wua_id
df$wua_id = NULL
metro = NULL
for (i in unique (df$tech)) {
#i = "Automotive ECUs"
sub = subset (df, df$tech == i)
sub$population = log(sub$count+1)
sub$rel = sub$rel
sub$rca = sub$rca
sub$name = sub$fua_name
sub$country = substr(sub$fua_id, 0, 2)
sub$rca2 = sub$rca
sub$rca2[sub$rca2>4] = 4
sub$index = rescale(sub$count)+
rescale (rescale(sub$rel)*rescale(sub$rca2))
sub$index = round(rescale(round(rank (sub$index),0)),2)
sub$index = rescale(rank(sub$count))+
rescale(rank(sub$rel)+rank(sub$rca2))
sub$index = round(rescale(round(rank (sub$index),0)),2)
sub$population = sub$index
subsub = unique(sub[, c("fua_id", "count", "rel", "index")])
subsub$rankpat = round(rank (-subsub$count),0)
subsub$rankrel = round(rank (-subsub$rel),0)
subsub$rankindex = round(rank (-subsub$index),0)
subsub$count = NULL
subsub$rel = NULL
subsub$index = NULL
sub = merge (sub, subsub, by = "fua_id")
p2 = toJSON(sub)
all = paste (p1, p2, p3, collapse="\n")
setwd(paste0(dir, "/3-outputs/maps"))
i = iconv(i, to = 'ASCII//TRANSLIT')
i = gsub(" ", "-", i, fixed = TRUE)
i = gsub("/", "-", i, fixed = TRUE)
i = gsub(",", "-", i, fixed = TRUE)
i = gsub("(", "-", i, fixed = TRUE)
i = gsub(")", "", i, fixed = TRUE)
i = gsub("--", "-", i, fixed = TRUE)
i = gsub("-.", ".", i, fixed = TRUE)
i = tolower (i)
setwd(paste0(dir, "/3-outputs/maps"))
all = paste (p1, p2, p3, collapse="\n")
writeLines(all, paste0(i, ".html"))
setwd(paste0(dir, "/3-outputs/maps/east-asia"))
asia = paste (p1, p2, p3.asia, collapse="\n")
writeLines(asia, paste0(i, ".html"))
setwd(paste0(dir, "/3-outputs/maps/north-america"))
northam = paste (p1, p2, p3.northam, collapse="\n")
writeLines(northam, paste0(i, ".html"))
setwd(paste0(dir, "/3-outputs/maps/europe"))
eu = paste (p1, p2, p3.eu, collapse="\n")
writeLines(eu, paste0(i, ".html"))
setwd(paste0(web, "/maps"))
writeLines(all, paste0(i, ".html"))
setwd(paste0(web, "/maps/east-asia"))
writeLines(asia, paste0(i, ".html"))
setwd(paste0(web, "/maps/north-america"))
writeLines(northam, paste0(i, ".html"))
setwd(paste0(web, "/maps/europe"))
writeLines(eu, paste0(i, ".html"))
metro = rbind (metro, sub)
}
metro = unique (metro[, c("country", "fua_id", "fua_name", "tech",
"index", "rankindex",
"count", "rankpat",
"rel", "rankrel",
"rca")])
setwd(paste0(dir, "/3-outputs/maps"))
library (DT)
dtdata1 <- datatable (metro, filter = 'top')
DT::saveWidget(dtdata1, "metro.html")
setwd(paste0(web, "/maps"))
DT::saveWidget(dtdata1, "metro.html")
metro$index.all = ave(metro$index, metro$fua_name, FUN = sum)
sub = unique (metro[, c("country", "fua_id", "fua_name", "index.all")])
for (i in unique (metro$tech)) {
subsub = subset (metro, metro$tech==i)
subsub = subsub[, c("fua_name", "index")]
subsub$rank = rank(-subsub$index)
colnames (subsub) = c("fua_id", paste0("Index - ", i))
subsub$rank = rank(-subsub$`Index - Computer-aided design [CAD]`)
sub = merge (sub, subsub, by = "fua_id")
}
#metro = unique (metro[, c("country", "fua_id", "fua_name", "index.all")])
setwd(paste0(dir, "/3-outputs/maps"))
dtdata1 <- datatable (sub, filter = 'top')
DT::saveWidget(dtdata1, "metro-all.html")
setwd(paste0(web, "/maps"))
DT::saveWidget(dtdata1, "metro-all.html")
i = "Automotive ECUs"
sub = subset (df, df$tech == i)
sub$population = log(sub$count+1)
sub$rel = sub$rel
sub$rca = sub$rca
sub$name = sub$fua_name
sub$country = substr(sub$fua_id, 0, 2)
sub$rca2 = sub$rca
#sub$rca2[sub$rca2>4] = 4
sub$index = rescale(rank(sub$count))+
rescale(rank(sub$rel)+rank(sub$rca2))
View(sub)
sub$index = round(rescale(round(rank (sub$index),0)),2)
cor(sub$index, sub$count)
cor(sub$index, sub$rel)
cor(sub$index, sub$rca)
sub = subset (df, df$tech == i)
head(sub)
sub$pat.count = sub$count
sub = subset (df, df$tech == i)
sub$pat = sub$count
sub$rankpat = round(rank (-sub$count),0)
sub$rankrel = round(rank (-sub$rel),0)
sub$rankindex = round(rank (-sub$index),0)
View(sub)
sub = subset (df, df$tech == i)
# sub as multiple (map) id for the same fuaid, so subset to compute ranks
sub2 = unique(sub[, c("fua_id", "count", "rel", "rca")])
head(sub2)
sub = subset (df, df$tech == i)
sub$pat = sub$count
# sub as multiple (map) id for the same fuaid, so subset to compute ranks
sub2 = unique(sub[, c("fua_id", "pat", "rel", "rca")])
sub2$rankpat = round(rank (-sub2$count),0)
# sub as multiple (map) id for the same fuaid, so subset to compute ranks
sub2 = unique(sub[, c("fua_id", "pat", "rel", "rca")])
sub2$rankpat = round(rank (-sub2$pat),0)
View(sub2)
sub2$rankpat = round(rank (-sub2$pat),0)
sub2$rankrel = round(rank (-sub2$rel),0)
sub2$rankrca = round(rank (-sub2$rca),0)
sub = subset (df, df$tech == i)
sub$pat = sub$count
# sub as multiple (map) id for the same fuaid, so subset to compute ranks
sub2 = unique(sub[, c("fua_id", "fua_name", "pat", "rel", "rca")])
sub2$rankpat = round(rank (-sub2$pat),0)
sub2$rankrel = round(rank (-sub2$rel),0)
sub2$rankrca = round(rank (-sub2$rca),0)
View(sub2)
cor(sub2[, 6:8])
sub2$index = sub2$rankpat + sub2$rankrel + sub2$rankrca
View(sub2)
sub2$index2 = rescale(log(sub2$pat+1)) + sub2$rankrel + sub2$rankrca
View(sub2)
sub2$index2 = rescale(-log(sub2$pat+1)) + sub2$rankrel + sub2$rankrca
sub2$relrca = round(rank (-sub2$rca-sub2$rel),0)
View(sub2)
sub2$relrca = sub2$rca+sub2$rel
View(sub2)
sub2$relrca = sub2$rankrca+sub2$rankrel
View(sub2)
mean(sub2$pat)
sub2$rankrelrca = round(rank (-sub2$relrca),0)
sub2$relrca = sub2$rankrca+sub2$rankrel
sub2$rankrelrca = round(rank (-sub2$relrca),0)
sub2$rankrelrca = round(rank (sub2$relrca),0)
sub2$index = ound(rank (sub2$rankpat + sub2$rankrelrca),0)
sub2$index = round(rank (sub2$rankpat + sub2$rankrelrca),0)
View(sub2)
sub2$index = rescale(sub2$index)
sub2$index = round(rescale(-sub2$index),0)
sub2$index = round(rescale(-sub2$index),2)
sub2$index = round(rank (sub2$rankpat + sub2$rankrelrca),0)
sub2$index = round(rescale(-sub2$index),2)
View(sub2)
sub2$index = sub2$rankpat + sub2$rankrelrca
sub2$index = sub2$rankpat + sub2$rankrelrca
sub2$rankindex = rank(sub2$index)
sub2$index = round(rescale(-sub2$index),2)
sub2$index = round(sub2$rankpat + sub2$rankrelrca,0)
sub2$rankindex = rank(sub2$index)
sub2$index = round(rescale(-sub2$index),2)
sub2$index = sub2$rankpat + sub2$rankrelrca
sub2$index2 = round(rescale(-sub2$index),2)
sub2$index = sub2$rankpat + sub2$rankrelrca
sub2$index = round(rescale(-sub2$index),2)
sub2$rankindex = rank(sub2$index)
sub2$rankindex = round(rank(sub2$index),0)
sub2$index = sub2$rankpat + sub2$rankrelrca
sub2$index = round(rescale(-sub2$index),2)
sub2$rankindex = round(rank(-sub2$index),0)
sub2 = sub2[, c("fua_id", "rankpat", "rankrel",
"rankrca", "index", "rankindex")]
View(sub2)
sub = merge (sub, subsub, by = "fua_id")
sub = subset (df, df$tech == i)
sub$pat = sub$count
# sub as multiple (map) id for the same fuaid, so subset to compute ranks
sub2 = unique(sub[, c("fua_id", "fua_name", "pat", "rel", "rca")])
sub2$rankpat = round(rank (-sub2$pat),0)
sub2$rankrel = round(rank (-sub2$rel),0)
sub2$rankrca = round(rank (-sub2$rca),0)
sub2$relrca = sub2$rankrca+sub2$rankrel
sub2$rankrelrca = round(rank (sub2$relrca),0)
sub2$index = sub2$rankpat + sub2$rankrelrca
sub2$index = round(rescale(-sub2$index),2)
sub2$rankindex = round(rank(-sub2$index),0)
sub2 = sub2[, c("fua_id", "rankpat", "rankrel",
"rankrca", "index", "rankindex")]
sub = merge (sub, sub2, by = "fua_id")
View(sub)
sub$population = sub$index
sub$rel = sub$rel
sub$rca = sub$rca
sub$name = sub$fua_name
sub$country = substr(sub$fua_id, 0, 2)
head(sub)
options(stringsAsFactors=FALSE)
library (jsonlite)
library (EconGeo)
library (RColorBrewer)
library (data.table)
library (dplyr)
rescale <- function(x) {
((x) - min(x, na.rm = TRUE))/(max(x, na.rm = TRUE) -
min(x, na.rm = TRUE)) * 100}
dir  = "D:/Dropbox/2-private/1-asg/1-production/2-continental" # for analysis
dir.regpat = "D:/Dropbox/2-private/1-asg/1-production/_DATA/PATENTS/REGPAT" # for latest regpat version
web = "D:/Dropbox/2-private/PABalland.github.io/asg/continental"
# load different parts of html
setwd("D:/Dropbox/2-private/1-asg/1-production/_SOURCE/maps/world-urban-areas")
p1 = paste(readLines("part-1.html"), collapse="\n") #before json data
p3 = paste(readLines("part-3.html"), collapse="\n") #after json data
p3.asia = paste(readLines("part-3-east-asia.html"), collapse="\n") #after json data
p3.northam = paste(readLines("part-3-north-america.html"), collapse="\n") #after json data
p3.eu = paste(readLines("part-3-europe.html"), collapse="\n") #after json data
# read geography of prio
setwd(paste0(dir, "/2-analysis"))
df = read.csv2 ("fua-tech-4d.csv", sep = ";", header = T)
# remove non prio
df$nbdig = nchar(gsub("[^0-9]+", "", df$tech))
df = subset (df, df$nbdig==0)
df$nbdig = NULL
# merge to get wuaid (needed for the map)
setwd("D:/Dropbox/2-private/1-asg/1-production/_SOURCE/maps/world-urban-areas")
wua = unique(read.csv2 ("wua-fua-crosswalk.csv"))[, c("wua_id", "fua_id")]
wua <- wua[complete.cases(wua),]
# merge
df = merge (df, wua, by = "fua_id")
df$id = df$wua_id
df$wua_id = NULL
metro = NULL
for (i in unique (df$tech)) {
#i = "Automotive ECUs"
sub = subset (df, df$tech == i)
sub$pat = sub$count
# sub as multiple (map) id for the same fuaid, so subset to compute ranks
sub2 = unique(sub[, c("fua_id", "fua_name", "pat", "rel", "rca")])
sub2$rankpat = round(rank (-sub2$pat),0)
sub2$rankrel = round(rank (-sub2$rel),0)
sub2$rankrca = round(rank (-sub2$rca),0)
sub2$relrca = sub2$rankrca+sub2$rankrel
sub2$rankrelrca = round(rank (sub2$relrca),0)
sub2$index = sub2$rankpat + sub2$rankrelrca
sub2$index = round(rescale(-sub2$index),2)
sub2$rankindex = round(rank(-sub2$index),0)
sub2 = sub2[, c("fua_id", "rankpat", "rankrel",
"rankrca", "index", "rankindex")]
sub = merge (sub, sub2, by = "fua_id")
sub$population = sub$index
sub$rel = sub$rel
sub$rca = sub$rca
sub$name = sub$fua_name
sub$country = substr(sub$fua_id, 0, 2)
p2 = toJSON(sub)
all = paste (p1, p2, p3, collapse="\n")
setwd(paste0(dir, "/3-outputs/maps"))
i = iconv(i, to = 'ASCII//TRANSLIT')
i = gsub(" ", "-", i, fixed = TRUE)
i = gsub("/", "-", i, fixed = TRUE)
i = gsub(",", "-", i, fixed = TRUE)
i = gsub("(", "-", i, fixed = TRUE)
i = gsub(")", "", i, fixed = TRUE)
i = gsub("--", "-", i, fixed = TRUE)
i = gsub("-.", ".", i, fixed = TRUE)
i = tolower (i)
setwd(paste0(dir, "/3-outputs/maps"))
all = paste (p1, p2, p3, collapse="\n")
writeLines(all, paste0(i, ".html"))
setwd(paste0(dir, "/3-outputs/maps/east-asia"))
asia = paste (p1, p2, p3.asia, collapse="\n")
writeLines(asia, paste0(i, ".html"))
setwd(paste0(dir, "/3-outputs/maps/north-america"))
northam = paste (p1, p2, p3.northam, collapse="\n")
writeLines(northam, paste0(i, ".html"))
setwd(paste0(dir, "/3-outputs/maps/europe"))
eu = paste (p1, p2, p3.eu, collapse="\n")
writeLines(eu, paste0(i, ".html"))
setwd(paste0(web, "/maps"))
writeLines(all, paste0(i, ".html"))
setwd(paste0(web, "/maps/east-asia"))
writeLines(asia, paste0(i, ".html"))
setwd(paste0(web, "/maps/north-america"))
writeLines(northam, paste0(i, ".html"))
setwd(paste0(web, "/maps/europe"))
writeLines(eu, paste0(i, ".html"))
metro = rbind (metro, sub)
}
metro = unique (metro[, c("country", "fua_id", "fua_name", "tech",
"index", "rankindex",
"count", "rankpat",
"rel", "rankrel",
"rca")])
setwd(paste0(dir, "/3-outputs/maps"))
library (DT)
dtdata1 <- datatable (metro, filter = 'top')
DT::saveWidget(dtdata1, "metro.html")
setwd(paste0(web, "/maps"))
DT::saveWidget(dtdata1, "metro.html")
metro$index.all = ave(metro$index, metro$fua_name, FUN = sum)
sub = unique (metro[, c("country", "fua_id", "fua_name", "index.all")])
for (i in unique (metro$tech)) {
subsub = subset (metro, metro$tech==i)
subsub = subsub[, c("fua_name", "index")]
subsub$rank = rank(-subsub$index)
colnames (subsub) = c("fua_id", paste0("Index - ", i))
subsub$rank = rank(-subsub$`Index - Computer-aided design [CAD]`)
sub = merge (sub, subsub, by = "fua_id")
}
#metro = unique (metro[, c("country", "fua_id", "fua_name", "index.all")])
setwd(paste0(dir, "/3-outputs/maps"))
dtdata1 <- datatable (sub, filter = 'top')
DT::saveWidget(dtdata1, "metro-all.html")
setwd(paste0(web, "/maps"))
DT::saveWidget(dtdata1, "metro-all.html")
options(stringsAsFactors=FALSE)
library (jsonlite)
library (EconGeo)
library (RColorBrewer)
library (data.table)
library (dplyr)
rescale <- function(x) {
((x) - min(x, na.rm = TRUE))/(max(x, na.rm = TRUE) -
min(x, na.rm = TRUE)) * 100}
dir  = "D:/Dropbox/2-private/1-asg/1-production/2-continental" # for analysis
dir.regpat = "D:/Dropbox/2-private/1-asg/1-production/_DATA/PATENTS/REGPAT" # for latest regpat version
web = "D:/Dropbox/2-private/PABalland.github.io/asg/continental"
# load different parts of html
setwd("D:/Dropbox/2-private/1-asg/1-production/_SOURCE/maps/world-urban-areas")
p1 = paste(readLines("part-1.html"), collapse="\n") #before json data
p3 = paste(readLines("part-3.html"), collapse="\n") #after json data
p3.asia = paste(readLines("part-3-east-asia.html"), collapse="\n") #after json data
p3.northam = paste(readLines("part-3-north-america.html"), collapse="\n") #after json data
p3.eu = paste(readLines("part-3-europe.html"), collapse="\n") #after json data
# read geography of prio
setwd(paste0(dir, "/2-analysis"))
df = read.csv2 ("fua-tech-4d.csv", sep = ";", header = T)
# remove non prio
df$nbdig = nchar(gsub("[^0-9]+", "", df$tech))
df = subset (df, df$nbdig==0)
df$nbdig = NULL
# merge to get wuaid (needed for the map)
setwd("D:/Dropbox/2-private/1-asg/1-production/_SOURCE/maps/world-urban-areas")
wua = unique(read.csv2 ("wua-fua-crosswalk.csv"))[, c("wua_id", "fua_id")]
wua <- wua[complete.cases(wua),]
# merge
df = merge (df, wua, by = "fua_id")
df$id = df$wua_id
df$wua_id = NULL
metro = NULL
for (i in unique (df$tech)) {
#i = "Automotive ECUs"
sub = subset (df, df$tech == i)
sub$pat = sub$count
# sub as multiple (map) id for the same fuaid, so subset to compute ranks
sub2 = unique(sub[, c("fua_id", "fua_name", "pat", "rel", "rca")])
sub2$rankpat = round(rank (-sub2$pat),0)
sub2$rankrel = round(rank (-sub2$rel),0)
sub2$rankrca = round(rank (-sub2$rca),0)
sub2$relrca = sub2$rankrca+sub2$rankrel
sub2$rankrelrca = round(rank (sub2$relrca),0)
sub2$index = sub2$rankpat + sub2$rankrelrca
sub2$index = round(rescale(-sub2$index),2)
sub2$rankindex = round(rank(-sub2$index),0)
sub2 = sub2[, c("fua_id", "rankpat", "rankrel",
"rankrca", "index", "rankindex")]
sub = merge (sub, sub2, by = "fua_id")
sub$population = sub$index
sub$rel = sub$rel
sub$rca = sub$rca
sub$name = sub$fua_name
sub$country = substr(sub$fua_id, 0, 2)
p2 = toJSON(sub)
all = paste (p1, p2, p3, collapse="\n")
setwd(paste0(dir, "/3-outputs/maps"))
i = iconv(i, to = 'ASCII//TRANSLIT')
i = gsub(" ", "-", i, fixed = TRUE)
i = gsub("/", "-", i, fixed = TRUE)
i = gsub(",", "-", i, fixed = TRUE)
i = gsub("(", "-", i, fixed = TRUE)
i = gsub(")", "", i, fixed = TRUE)
i = gsub("--", "-", i, fixed = TRUE)
i = gsub("-.", ".", i, fixed = TRUE)
i = tolower (i)
setwd(paste0(dir, "/3-outputs/maps"))
all = paste (p1, p2, p3, collapse="\n")
writeLines(all, paste0(i, ".html"))
setwd(paste0(dir, "/3-outputs/maps/east-asia"))
asia = paste (p1, p2, p3.asia, collapse="\n")
writeLines(asia, paste0(i, ".html"))
setwd(paste0(dir, "/3-outputs/maps/north-america"))
northam = paste (p1, p2, p3.northam, collapse="\n")
writeLines(northam, paste0(i, ".html"))
setwd(paste0(dir, "/3-outputs/maps/europe"))
eu = paste (p1, p2, p3.eu, collapse="\n")
writeLines(eu, paste0(i, ".html"))
setwd(paste0(web, "/maps"))
writeLines(all, paste0(i, ".html"))
setwd(paste0(web, "/maps/east-asia"))
writeLines(asia, paste0(i, ".html"))
setwd(paste0(web, "/maps/north-america"))
writeLines(northam, paste0(i, ".html"))
setwd(paste0(web, "/maps/europe"))
writeLines(eu, paste0(i, ".html"))
metro = rbind (metro, sub)
}
metro = unique (metro[, c("country", "fua_id", "fua_name", "tech",
"index", "rankindex",
"pat", "rankpat",
"rel", "rankrel",
"rca", "rankrca")])
setwd(paste0(dir, "/3-outputs/maps"))
library (DT)
dtdata1 <- datatable (metro, filter = 'top')
DT::saveWidget(dtdata1, "metro.html")
setwd(paste0(web, "/maps"))
DT::saveWidget(dtdata1, "metro.html")
