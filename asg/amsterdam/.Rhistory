1+1
# Load functions & packages
library(data.table)
library(EconGeo)
library(jsonlite)
source("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/priority.classification.cpc.R")
source("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/sparse.co.occurrence.chunked.R")
source("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/complementarity.R")
source("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/rescale.R")
source("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/count.inv.links.R")
source ("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/sparse.co.occurrence.R")
source ("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/sparse.co.occurrence.chunked.R")
source ("/Users/pierre-alex/Dropbox/1-asg/1-production/2-code/count.inv.links.R")
### 1. PATENTS
# LATEST OPENALEX VERSION
dir = "/Users/pierre-alex/Dropbox/1-asg/1-production/1-data/SCIENCE/OPENALEX"
version = "OPENALEX_202408"
ctry = c("AT", "BE", "BG", "CY", "CZ", "DE", "DK", "EE", "ES", "FI", "FR", "HR", "HU",
"IE", "IT", "LT", "LU", "LV", "MT", "NL", "PL", "PT", "RO", "SI", "GR", "SE", "EL",
"SK", "NO", "CH", "LI", "IS", "GB", "UK") # EU 27 + UK + EFTA
y = 2024
i = "gics_industry_group"
relatedness = NULL
bimodal = NULL
net = NULL
# load works
setwd(paste0(dir, "/fields"))
works = fread (paste0(y,".csv"), nrows = 1000000) # work_id; topic_id; score
#works = fread (paste0(y,".csv")) # work_id; topic_id; score # gics_industry_group == "Automobiles & Components"
works = works[, .(work_id, get(i))]
works = works[complete.cases(works),]
colnames(works) = c("work_id", i) # work_id, field
works <- works[get(i) != "", ]
# load inst
setwd(paste0(dir, "/inst"))
inst = fread (paste0(y,".csv")) # work_id; institution; country; urban; city
inst = subset (inst, inst$country %in% ctry)
# load inst
setwd(paste0(dir, "/OPENALEX_202408/location_oecd"))
oecd = read.csv ("location_oecd.csv")
oecd$nuts2 = substr(oecd$oecd_tl3_id, 1, 4)
oecd = unique(oecd[, c("geonames_city_id", "nuts2")])
inst = merge (inst, oecd, by.x = "city", by.y = "geonames_city_id", allow.cartesian=TRUE)
inst = unique(inst[, c("work_id", "nuts2")])
inst$country = substr(inst$nuts2, 0, 2)
inst = subset (inst, inst$country %in% ctry)
inst$country = NULL
inst$nuts2[inst$nuts2=="ITC1"] = "Piedmonte"
inst$nuts2[inst$nuts2=="DE11"] = "Baden Wurttemberg"
inst$nuts2[inst$nuts2=="DE12"] = "Baden Wurttemberg"
inst$nuts2[inst$nuts2=="DE13"] = "Baden Wurttemberg"
inst$nuts2[inst$nuts2=="DE14"] = "Baden Wurttemberg"
inst$nuts2[inst$nuts2=="PL51"] = "Dolnoslaskie"
inst$nuts2[inst$nuts2=="FR23"] = "Normandy"
inst$nuts2[inst$nuts2=="FR25"] = "Normandy"
inst$nuts2[inst$nuts2=="RO12"] = "Centre (Romania)"
inst$nuts2[inst$nuts2=="ES61"] = "Andalusia"
j = "nuts2"
# create geo
geo = inst[, .(work_id, get(j))] #no unique here
geo = geo[complete.cases(geo),]
colnames (geo) = c("work_id", j) #work_id; geo
### 1. COMPUTE CO-OCCURENCES (AND SINGLE COUNTS IN DIAG)
counts =  unique(works) # like unique(patcpc[, c("patnb", i)]); but did not work with data.table
counts = counts[complete.cases(counts),]
counts = sparse.co.occurrence (counts) # huge improvement to use sparse
counts = get_list(counts)
counts$year = y
colnames (counts) = c("from", "to", "count", "year")
counts = counts[order(counts$year),]
counts = counts[complete.cases(counts),]
relatedness = rbind (relatedness, counts)
View(relatedness)
### 2. GEO-DOMAIN: COMPUTE NB OF PUBLICATIONS
counts = merge (geo, unique(works), by = "work_id", all.x = T, allow.cartesian=TRUE) # merge works and geo
counts =  unique(counts)
colnames (counts) = c("work_id", "geo", "domain")
counts = subset (counts, !counts$geo == "NA")
counts = subset (counts, !counts$domain == "NA")
counts <- counts[complete.cases(counts), ]
counts = unique (counts)
counts$count = 1
setDT(counts)
counts[, count := sum(count), by = .(geo, domain)] #counts$count = ave(counts$count, paste0(counts$geo, counts$domain, counts$year), FUN = sum)
counts = unique(counts[, c("geo", "domain", "count")])
counts = counts[order(counts$domain),]
counts = counts[order(counts$geo),]
counts = counts[complete.cases(counts),]
counts$year = y
counts <- counts[apply(counts != "", 1, all), ]
bimodal = rbind(counts, bimodal)
View(bimodal)
View(bimodal)
### 3. GEO-GEO: LINKS BETWEEN REGIONS
counts = merge (geo, unique(works), by = "work_id", all.x = T, allow.cartesian=TRUE)
colnames (counts) = c("work_id", "geo", "domain")
counts = counts[complete.cases(counts),]
k = "Automobiles & Components"
k = "Pharmaceuticals, Biotechnology & Life Sciences"
counts3 = subset (counts, counts$domain == k)
counts3 = counts3[, c("work_id", "geo")]
counts3 = count.inv.links(counts3)
net = rbind (net, counts3)
View(net)
k = "Automobiles & Components"
#k = "Pharmaceuticals, Biotechnology & Life Sciences"
counts3 = subset (counts, counts$domain == k)
counts3 = subset (counts, counts$domain == k)
counts3 = counts3[, c("work_id", "geo")]
counts3 = count.inv.links(counts3)
counts3 = subset (counts, counts$domain == k)
counts3 = counts3[, c("work_id", "geo")]
if (nrow(counts3) < 1) { # this is when there is no link in a domain
counts3 = data.frame(
from = NA,
to = NA,
domain = k,
year = y,
full = 0,
binary = 0)
}
counts3 = count.inv.links(counts3)
counts3 = subset (counts, counts$domain == k)
counts3 = counts3[, c("work_id", "geo")]
if (nrow(counts3) > 1) { # this is when there is no link in a domain
counts3 = count.inv.links(counts3)
net = rbind (net, counts3)
}
y = 2024
i = "gics_industry_group"
relatedness = NULL
bimodal = NULL
net = NULL
for (y in unique (seq(2024,2000))) {
# load works
setwd(paste0(dir, "/fields"))
works = fread (paste0(y,".csv"), nrows = 1000000) # work_id; topic_id; score
#works = fread (paste0(y,".csv")) # work_id; topic_id; score # gics_industry_group == "Automobiles & Components"
works = works[, .(work_id, get(i))]
works = works[complete.cases(works),]
colnames(works) = c("work_id", i) # work_id, field
works <- works[get(i) != "", ]
# load inst
setwd(paste0(dir, "/inst"))
inst = fread (paste0(y,".csv")) # work_id; institution; country; urban; city
inst = subset (inst, inst$country %in% ctry)
# load inst
setwd(paste0(dir, "/OPENALEX_202408/location_oecd"))
oecd = read.csv ("location_oecd.csv")
oecd$nuts2 = substr(oecd$oecd_tl3_id, 1, 4)
oecd = unique(oecd[, c("geonames_city_id", "nuts2")])
inst = merge (inst, oecd, by.x = "city", by.y = "geonames_city_id", allow.cartesian=TRUE)
inst = unique(inst[, c("work_id", "nuts2")])
inst$country = substr(inst$nuts2, 0, 2)
inst = subset (inst, inst$country %in% ctry)
inst$country = NULL
inst$nuts2[inst$nuts2=="ITC1"] = "Piedmonte"
inst$nuts2[inst$nuts2=="DE11"] = "Baden Wurttemberg"
inst$nuts2[inst$nuts2=="DE12"] = "Baden Wurttemberg"
inst$nuts2[inst$nuts2=="DE13"] = "Baden Wurttemberg"
inst$nuts2[inst$nuts2=="DE14"] = "Baden Wurttemberg"
inst$nuts2[inst$nuts2=="PL51"] = "Dolnoslaskie"
inst$nuts2[inst$nuts2=="FR23"] = "Normandy"
inst$nuts2[inst$nuts2=="FR25"] = "Normandy"
inst$nuts2[inst$nuts2=="RO12"] = "Centre (Romania)"
inst$nuts2[inst$nuts2=="ES61"] = "Andalusia"
j = "nuts2"
# create geo
geo = inst[, .(work_id, get(j))] #no unique here
geo = geo[complete.cases(geo),]
colnames (geo) = c("work_id", j) #work_id; geo
### 1. COMPUTE CO-OCCURENCES (AND SINGLE COUNTS IN DIAG)
counts =  unique(works) # like unique(patcpc[, c("patnb", i)]); but did not work with data.table
counts = counts[complete.cases(counts),]
counts = sparse.co.occurrence (counts) # huge improvement to use sparse
counts = get_list(counts)
counts$year = y
colnames (counts) = c("from", "to", "count", "year")
counts = counts[order(counts$year),]
counts = counts[complete.cases(counts),]
relatedness = rbind (relatedness, counts)
### 2. GEO-DOMAIN: COMPUTE NB OF PUBLICATIONS
counts = merge (geo, unique(works), by = "work_id", all.x = T, allow.cartesian=TRUE) # merge works and geo
counts =  unique(counts)
colnames (counts) = c("work_id", "geo", "domain")
counts = subset (counts, !counts$geo == "NA")
counts = subset (counts, !counts$domain == "NA")
counts <- counts[complete.cases(counts), ]
counts = unique (counts)
counts$count = 1
setDT(counts)
counts[, count := sum(count), by = .(geo, domain)] #counts$count = ave(counts$count, paste0(counts$geo, counts$domain, counts$year), FUN = sum)
counts = unique(counts[, c("geo", "domain", "count")])
counts = counts[order(counts$domain),]
counts = counts[order(counts$geo),]
counts = counts[complete.cases(counts),]
counts$year = y
counts <- counts[apply(counts != "", 1, all), ]
bimodal = rbind(counts, bimodal)
#} ## TO REMOVE
### 3. GEO-GEO: LINKS BETWEEN REGIONS
counts = merge (geo, unique(works), by = "work_id", all.x = T, allow.cartesian=TRUE)
colnames (counts) = c("work_id", "geo", "domain")
counts = counts[complete.cases(counts),]
k = "Automobiles & Components"
#k = "Pharmaceuticals, Biotechnology & Life Sciences"
counts3 = subset (counts, counts$domain == k)
counts3 = counts3[, c("work_id", "geo")]
if (nrow(counts3) > 1) { # this is when there is no link in a domain
counts3 = count.inv.links(counts3)
net = rbind (net, counts3)
}
}
head(net)
y
y=2020
setwd(paste0(dir, "/fields"))
works = fread (paste0(y,".csv"), nrows = 1000000) # work_id; topic_id; score
unique(works$gics_industry_group)
works = fread (paste0(y,".csv")) # work_id; topic_id; score
unique(works$gics_industry_group)
y = 2024
i = "gics_industry_group"
relatedness = NULL
bimodal = NULL
net = NULL
for (y in unique (seq(2024,2020))) {
# load works
setwd(paste0(dir, "/fields"))
works = fread (paste0(y,".csv")) # work_id; topic_id; score
#works = fread (paste0(y,".csv")) # work_id; topic_id; score # gics_industry_group == "Automobiles & Components"
works = works[, .(work_id, get(i))]
works = works[complete.cases(works),]
colnames(works) = c("work_id", i) # work_id, field
works <- works[get(i) != "", ]
# load inst
setwd(paste0(dir, "/inst"))
inst = fread (paste0(y,".csv")) # work_id; institution; country; urban; city
inst = subset (inst, inst$country %in% ctry)
# load inst
setwd(paste0(dir, "/OPENALEX_202408/location_oecd"))
oecd = read.csv ("location_oecd.csv")
oecd$nuts2 = substr(oecd$oecd_tl3_id, 1, 4)
oecd = unique(oecd[, c("geonames_city_id", "nuts2")])
inst = merge (inst, oecd, by.x = "city", by.y = "geonames_city_id", allow.cartesian=TRUE)
inst = unique(inst[, c("work_id", "nuts2")])
inst$country = substr(inst$nuts2, 0, 2)
inst = subset (inst, inst$country %in% ctry)
inst$country = NULL
inst$nuts2[inst$nuts2=="ITC1"] = "Piedmonte"
inst$nuts2[inst$nuts2=="DE11"] = "Baden Wurttemberg"
inst$nuts2[inst$nuts2=="DE12"] = "Baden Wurttemberg"
inst$nuts2[inst$nuts2=="DE13"] = "Baden Wurttemberg"
inst$nuts2[inst$nuts2=="DE14"] = "Baden Wurttemberg"
inst$nuts2[inst$nuts2=="PL51"] = "Dolnoslaskie"
inst$nuts2[inst$nuts2=="FR23"] = "Normandy"
inst$nuts2[inst$nuts2=="FR25"] = "Normandy"
inst$nuts2[inst$nuts2=="RO12"] = "Centre (Romania)"
inst$nuts2[inst$nuts2=="ES61"] = "Andalusia"
j = "nuts2"
# create geo
geo = inst[, .(work_id, get(j))] #no unique here
geo = geo[complete.cases(geo),]
colnames (geo) = c("work_id", j) #work_id; geo
### 1. COMPUTE CO-OCCURENCES (AND SINGLE COUNTS IN DIAG)
counts =  unique(works) # like unique(patcpc[, c("patnb", i)]); but did not work with data.table
counts = counts[complete.cases(counts),]
counts = sparse.co.occurrence (counts) # huge improvement to use sparse
counts = get_list(counts)
counts$year = y
colnames (counts) = c("from", "to", "count", "year")
counts = counts[order(counts$year),]
counts = counts[complete.cases(counts),]
relatedness = rbind (relatedness, counts)
### 2. GEO-DOMAIN: COMPUTE NB OF PUBLICATIONS
counts = merge (geo, unique(works), by = "work_id", all.x = T, allow.cartesian=TRUE) # merge works and geo
counts =  unique(counts)
colnames (counts) = c("work_id", "geo", "domain")
counts = subset (counts, !counts$geo == "NA")
counts = subset (counts, !counts$domain == "NA")
counts <- counts[complete.cases(counts), ]
counts = unique (counts)
counts$count = 1
setDT(counts)
counts[, count := sum(count), by = .(geo, domain)] #counts$count = ave(counts$count, paste0(counts$geo, counts$domain, counts$year), FUN = sum)
counts = unique(counts[, c("geo", "domain", "count")])
counts = counts[order(counts$domain),]
counts = counts[order(counts$geo),]
counts = counts[complete.cases(counts),]
counts$year = y
counts <- counts[apply(counts != "", 1, all), ]
bimodal = rbind(counts, bimodal)
#} ## TO REMOVE
### 3. GEO-GEO: LINKS BETWEEN REGIONS
counts = merge (geo, unique(works), by = "work_id", all.x = T, allow.cartesian=TRUE)
colnames (counts) = c("work_id", "geo", "domain")
counts = counts[complete.cases(counts),]
k = "Automobiles & Components"
#k = "Pharmaceuticals, Biotechnology & Life Sciences"
counts3 = subset (counts, counts$domain == k)
counts3 = counts3[, c("work_id", "geo")]
if (nrow(counts3) > 1) { # this is when there is no link in a domain
counts3 = count.inv.links(counts3)
net = rbind (net, counts3)
}
}
head(net)
head(relatedness)
View(relatedness)
head(bimodal)
bimodal$count = ave(bimodal$count, paste0(bimodal$geo, bimodal$domain), FUN = sum)
head(bimodal)
bimodal = unique (bimodal[, c("geo", "domain", "count")])
View(bimodal)
View(relatedness)
View(relatedness)
relatedness$count = ave(relatedness$count, paste0(relatedness$from, relatedness$to), FUN = sum)
View(relatedness)
relatedness$year = NULL
relatedness = unique (relatedness[, c("from", "to", "count")])
View(relatedness)
View(net)
net$binary = ave(net$binary, paste0(net$from, net$to), FUN = sum)
net$full = ave(net$full, paste0(net$from, net$to), FUN = sum)
net = unique (net)
View(net)
geo = bimodal
head(geo)
geo <- geo[!is.na(geo), ]
geo <- geo[!is.na(domain), ]
# rca
rca = get_list(rca(get_matrix (geo)))
colnames (rca) = c("geo", "domain", "rca")
geo = merge (geo, rca, by = c("geo", "domain"))
View(geo)
head(relatedness)
# reldens
rcab = rca(get_matrix(geo[, c("geo", "domain", "count")]), binary = T)
rel2 = get_matrix(relatedness[, c("from", "to", "count")])
rel2 <- rel2[rownames(rel2) %in% colnames (rcab), colnames(rel2) %in% colnames(rcab)]
reldens = relatedness_density (rcab, rel2)
reldens[is.nan(reldens)] <- 0
reldens = get_list (reldens)
colnames (reldens) = c("geo", "domain", "reldens")
geo = merge (geo, reldens, by = c("geo", "domain"))
View(geo)
#comp
comp = data.frame (
domain = colnames (rcab),
ub = ubiquity (rcab),
mor = round (rescale(mort (rcab)*(1)),2),
comp = round (rescale(tci (rcab)*(1)),2) # sometimes need to * -1
)
View(comp)
View(geo)
comp = comp[, c("domain", "comp")]
geo = merge (geo, comp, by = "domain") # will remove non prio
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/3-projects/11-dg-regio-ron-simona/deliverables")
write.csv2(geo, "publications-relatedness.csv", row.names = F)
#complementarity maps
comp = complementarity(rcab, get_matrix(relatedness[, c("from", "to", "count")]))
head(comp)
comp = subset (comp, comp$Region != comp$region.that.adds)
comp2 = subset (comp, comp$Industry == "Automobiles & Components")
comp2 = subset (comp2, comp2$Region %in% regron)
#ron regions
regron = c("Piedmonte", "Baden Wurttemberg", "Dolnoslaskie", "Normandy",  "Centre (Romania)", "Andalusia")
comp2 = subset (comp2, comp2$Region %in% regron)
View(comp2)
comp2$from = comp2$Region
comp2$to = comp2$region.that.adds
comp2$complementarity = comp2$RD.added
comp2$Industry=NULL
comp2 = comp2[, c("from", "to", "complementarity")]
View(comp2)
# actual linkages
links = net
head(links)
comp2 = merge (comp2, links, by = c("from", "to"), all.x = T)
setwd("/Users/pierre-alex/Dropbox/1-asg/1-production/3-projects/11-dg-regio-ron-simona/deliverables")
write.csv2(comp2, "publications-complementarity-links.csv", row.names = F)
setwd("/Users/pierre-alex/Dropbox/PABalland.github.io/asg/amsterdam")
x = fromJSON("noord-holland.json")
write.cv2(x, "noord-holland.csv", row.names = F)
write.csv2(x, "noord-holland.csv", row.names = F)
View(x)
