source("step.classifier.wrapper.R")
source("step.classifier.R")
source("glance.classifier.R")
source("embedding.similarity.classifier.R")
source("embedding.similarity.R")
source("find.related.R")
source("rescale.R")
source("embedding.R")
source("combo.R")
# check most linguistic similar
df1 = step.classifier (check = T) # check to find kw
kw <- c("Metal", "mining")
df1 = step.classifier (type = "main", check = F) # keep top based on regex
View(df1)
# 6. Steel Loop
n = 6
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
kw <- index2$domain[index2$parent == "Sustainability"]
kw2 = c("Metal", "mining")
df3 = step.classifier.wrapper(combo = T)
c("Renewable Energy", "Sustainability", "CleanTech", "Solar", "Clean Energy", "Energy Efficiency", "Waste Management", "Environmental Engineering", )
View(df3)
index2$domain[index2$parent == "Sustainability"]
# 6. Steel Loop
n = 6
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
kw <- index2$domain[index2$parent == "Sustainability"]
kw2 = c("Metal", "mining", "mining technology")
df3 = step.classifier.wrapper(combo = T)
# START CLASSIFYING
df3 = NULL
# 6. Steel Loop
n = 6
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
kw <- index2$domain[index2$parent == "Sustainability"]
kw2 = c("Metal", "mining", "mining technology")
df3 = step.classifier.wrapper(combo = T)
View(df3)
# 7. Steel Loop
n = 7
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
# 7. Water Circularity
n = 7
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
kw <- index2$domain[index2$parent == "Water Purification"]
df3 = step.classifier.wrapper(combo = F)
# 7. Water Circularity
n = 7
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
kw <- c("Water Purification")
df3 = step.classifier.wrapper(combo = F)
View(df3)
# 8. Water Circularity
n = 8
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
# 8. Biobased Materials in Construction
n = 8
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
kw <- c("Green Building")
df3 = step.classifier.wrapper(combo = F)
View(df3)
n = 9
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
View(index2)
# 9. Critical Metals Reuse
n = 9
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
kw <- c("Recycling")
kw2 = c(index2$domain[index2$parent == "Manufacturing"], c("Precious Metals", "mining", "mining technology"))
df3 = step.classifier.wrapper(combo = T)
View(df3)
index2$domain[index2$parent == "Manufacturing"]
# 9. Critical Metals Reuse
n = 9
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
kw <- c("Recycling")
kw2 = c(c("Advanced Materials","Foundries","Industrial","Industrial Manufacturing","Machinery Manufacturing","Manufacturing"), c("Precious Metals", "mining", "mining technology"))
df3 = step.classifier.wrapper(combo = T)
View(df3)
# 10. Critical Metals Reuse
n = 10
# 10. Critical Metals Reuse
n = 10
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
# 10. Raw Material Shift
n = 10
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
# add combo (optional)
df2 = combo ("raw material") # check to find kw
View(df2)
index2$domain[index2$parent == "Sustainability"]
# 10. Raw Material Shift
n = 10
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
# 11. Raw Material Shift
n = 11
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
# check most linguistic similar
df1 = step.classifier (check = T) # check to find kw
kw <- c("AgTech")
df1 = step.classifier (type = "main", check = F) # keep top based on regex
# find related
rel = find.related(df1[, c("domain", "key")], y = 2024, data = data) # add to keywords above if spot related
View(rel)
# 11. Agrofood Waste Cut
n = 11
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
kw <- index2$domain[index2$parent == "Agriculture and Farming"]
kw2 = index2$domain[index2$parent == "Sustainability"]
df3 = step.classifier.wrapper(combo = T)
View(df3)
n = 12
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
unique(index1$domain)
unique(index1$description)
View(index2)
View(index1)
unique(index2$parent)
# 16. Circular food packaging
n = 16
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
n
# 14. Circular food packaging
n = 14
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
# 14. Textile Waste Cut
n = 14
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
kw <- index2$domain[index2$parent == "Clothing and Apparel"]
kw2 = index2$domain[index2$parent == "Sustainability"]
df3 = step.classifier.wrapper(combo = T)
View(df3)
index2$domain[index2$parent == "Sustainability"]
# 13. Textile Waste Cut
n = 13
paste0(index1[n,2], " --> ", glance$key[glance$domain == index1[n,2]])
View(glance)
head(glance)
index2
head(index2)
View(glance)
p = "4-eciv"
d = "submission" # key strategic technologies
d2 = "industries"
data = "crunchbase"
# load packages & functions
setwd("~/Library/CloudStorage/Dropbox/1-asg/1-build/2-code")
library(data.table)
library(EconGeo)
source("step.classifier.wrapper.R")
source("step.classifier.R")
source("glance.classifier.R")
source("embedding.similarity.classifier.R")
source("embedding.similarity.R")
source("find.related.R")
source("rescale.R")
source("embedding.R")
source("combo.R")
# glance
glance = glance.classifier(emb)
p = "4-eciv"
d = "submission" # key strategic technologies
d2 = "industries"
data = "crunchbase"
# load packages & functions
setwd("~/Library/CloudStorage/Dropbox/1-asg/1-build/2-code")
library(data.table)
library(EconGeo)
source("step.classifier.wrapper.R")
source("step.classifier.R")
source("glance.classifier.R")
source("embedding.similarity.classifier.R")
source("embedding.similarity.R")
source("find.related.R")
source("rescale.R")
source("embedding.R")
source("combo.R")
# load index of custom technologies & embedding matrix of custom domains
setwd(paste0("~/Library/CloudStorage/Dropbox/1-asg/1-build/3-projects/", p, "/0-custom/domain/", d))
index1 = read.csv("index.csv")
emb1 <- fread("embeddings.csv")
# load embedding matrix of general domains
setwd(paste0("~/Dropbox/1-asg/1-build/1-data/", toupper(data), "/2-transform/", d2))
index2 = read.csv("index.csv")
emb2 <- fread("embeddings.csv")
# compute embedding similarity between custom & general domains
emb = embedding.similarity.classifier (emb1, emb2)
# glance
glance = glance.classifier(emb)
head(index2)
p = "4-eciv"
d = "submission" # key strategic technologies
d2 = "industries"
data = "crunchbase"
# load packages & functions
setwd("~/Library/CloudStorage/Dropbox/1-asg/1-build/2-code")
library(data.table)
library(EconGeo)
source("step.classifier.wrapper.R")
source("step.classifier.R")
source("glance.classifier.R")
source("embedding.similarity.classifier.R")
source("embedding.similarity.R")
source("find.related.R")
source("rescale.R")
source("embedding.R")
source("combo.R")
# load index of custom technologies & embedding matrix of custom domains
setwd(paste0("~/Library/CloudStorage/Dropbox/1-asg/1-build/3-projects/", p, "/0-custom/domain/", d))
index1 = read.csv("index.csv")
emb1 <- fread("embeddings.csv")
# load embedding matrix of general domains
setwd(paste0("~/Dropbox/1-asg/1-build/1-data/", toupper(data), "/2-transform/", d2))
index2 = read.csv("index.csv")
emb2 <- fread("embeddings.csv")
# compute embedding similarity between custom & general domains
emb = embedding.similarity.classifier (emb1, emb2)
# glance
glance = glance.classifier(emb)
View(glance)
p = "4-eciv"
d = "submission" # key strategic technologies
d2 = "industries"
data = "crunchbase"
# load packages & functions
setwd("~/Library/CloudStorage/Dropbox/1-asg/1-build/2-code")
library(data.table)
library(EconGeo)
source("step.classifier.wrapper.R")
source("step.classifier.R")
source("glance.classifier.R")
source("embedding.similarity.classifier.R")
source("embedding.similarity.R")
source("find.related.R")
source("rescale.R")
source("embedding.R")
source("combo.R")
# load index of custom technologies & embedding matrix of custom domains
setwd(paste0("~/Library/CloudStorage/Dropbox/1-asg/1-build/3-projects/", p, "/0-custom/domain/", d))
index1 = read.csv("index.csv")
emb1 <- fread("embeddings.csv")
# load embedding matrix of general domains
setwd(paste0("~/Dropbox/1-asg/1-build/1-data/", toupper(data), "/2-transform/", d2))
index2 = read.csv("index.csv")
emb2 <- fread("embeddings.csv")
# compute embedding similarity between custom & general domains
emb = embedding.similarity.classifier (emb1, emb2)
# glance
glance = glance.classifier(emb)
p = "4-eciv"
d = "submission"
# "brief.pdf" outlines the European Circular Innovation Valley (ECIV) project's sub-missions,
# focusing on developing a circular economy across various regions and sectors. It details
# fourteen specific goals to be achieved by 2029, such as increasing industrial symbiosis,
# integrating eco-design into regional plans, and reducing virgin raw material extraction.
# The text also identifies key technologies, subsectors, and fields of science relevant to each mission,
# encompassing areas like green chemistry, biotechnology, and renewable energy.
# load functions & packages
setwd("~/Library/CloudStorage/Dropbox/1-asg/1-build/2-code")
library(data.table)
library(EconGeo)
source("embedding.similarity.R")
source("xy_umap.R")
palette <- readLines("color-palette.txt")
# read index
setwd(paste0("~/Library/CloudStorage/Dropbox/1-asg/1-build/3-projects/", p, "/0-custom/domain/", d))
index = read.csv("index.csv") # from
# read embeddings
setwd(paste0("~/Library/CloudStorage/Dropbox/1-asg/1-build/3-projects/", p, "/0-custom/domain/", d))
df = read.csv ("embeddings.csv")
df$description = NULL
# create umap (dimensionality reduction algo)
df_umap = xy_umap (df)
plot (df_umap$x, df_umap$y)
text (df_umap$x, df_umap$y, df_umap$domain)
# merge to add x and y in index
index = merge (index, df_umap, by = "domain")
plot (index$x, index$y)
text (index$x, index$y, index$parent)
# add color
index$color[index$parent == "Design & Business Transitions"] = "#365a94"
index$color[index$parent == "Industrial & Process Circularity"] = "#669999"
index$color[index$parent == "Material Transitions"] = "#800020"
index$color[index$parent == "Waste Cut & Packaging"] = "#8cab79"
# save
setwd(paste0("~/Library/CloudStorage/Dropbox/1-asg/1-build/3-projects/", p, "/0-custom/domain/", d))
index = index[, c("parent", "domain", "description", "color", "x", "y")]
index = index[order(index$parent, index$domain), ]
write.csv (index, "index.csv", row.names = F)
# embedding cosine similarity
df = embedding.similarity(df)
colnames (df) = c("from", "to", "score")
p = "4-eciv"
d = "submission"
# "brief.pdf" outlines the European Circular Innovation Valley (ECIV) project's sub-missions,
# focusing on developing a circular economy across various regions and sectors. It details
# fourteen specific goals to be achieved by 2029, such as increasing industrial symbiosis,
# integrating eco-design into regional plans, and reducing virgin raw material extraction.
# The text also identifies key technologies, subsectors, and fields of science relevant to each mission,
# encompassing areas like green chemistry, biotechnology, and renewable energy.
# load functions & packages
setwd("~/Library/CloudStorage/Dropbox/1-asg/1-build/2-code")
library(data.table)
library(EconGeo)
source("embedding.similarity.R")
source("xy_umap.R")
palette <- readLines("color-palette.txt")
# read index
setwd(paste0("~/Library/CloudStorage/Dropbox/1-asg/1-build/3-projects/", p, "/0-custom/domain/", d))
index = read.csv("index.csv") # from
# read embeddings
setwd(paste0("~/Library/CloudStorage/Dropbox/1-asg/1-build/3-projects/", p, "/0-custom/domain/", d))
df = read.csv ("embeddings.csv")
df$description = NULL
# create umap (dimensionality reduction algo)
df_umap = xy_umap (df)
plot (df_umap$x, df_umap$y)
text (df_umap$x, df_umap$y, df_umap$domain)
# merge to add x and y in index
index = merge (index, df_umap, by = "domain")
plot (index$x, index$y)
p = "4-eciv"
d = "submission"
# "brief.pdf" outlines the European Circular Innovation Valley (ECIV) project's sub-missions,
# focusing on developing a circular economy across various regions and sectors. It details
# fourteen specific goals to be achieved by 2029, such as increasing industrial symbiosis,
# integrating eco-design into regional plans, and reducing virgin raw material extraction.
# The text also identifies key technologies, subsectors, and fields of science relevant to each mission,
# encompassing areas like green chemistry, biotechnology, and renewable energy.
# load functions & packages
setwd("~/Library/CloudStorage/Dropbox/1-asg/1-build/2-code")
library(data.table)
library(EconGeo)
source("embedding.similarity.R")
source("xy_umap.R")
palette <- readLines("color-palette.txt")
# read index
setwd(paste0("~/Library/CloudStorage/Dropbox/1-asg/1-build/3-projects/", p, "/0-custom/domain/", d))
index = read.csv("index.csv") # from
# read embeddings
setwd(paste0("~/Library/CloudStorage/Dropbox/1-asg/1-build/3-projects/", p, "/0-custom/domain/", d))
df = read.csv ("embeddings.csv")
df$description = NULL
# create umap (dimensionality reduction algo)
df_umap = xy_umap (df)
plot (df_umap$x, df_umap$y)
text (df_umap$x, df_umap$y, df_umap$domain)
# merge to add x and y in index
index = merge (index, df_umap, by = "domain")
plot (index$x, index$y)
p = "4-eciv"
d = "submission"
# "brief.pdf" outlines the European Circular Innovation Valley (ECIV) project's sub-missions,
# focusing on developing a circular economy across various regions and sectors. It details
# fourteen specific goals to be achieved by 2029, such as increasing industrial symbiosis,
# integrating eco-design into regional plans, and reducing virgin raw material extraction.
# The text also identifies key technologies, subsectors, and fields of science relevant to each mission,
# encompassing areas like green chemistry, biotechnology, and renewable energy.
# load functions & packages
setwd("~/Library/CloudStorage/Dropbox/1-asg/1-build/2-code")
library(data.table)
library(EconGeo)
source("embedding.similarity.R")
source("xy_umap.R")
palette <- readLines("color-palette.txt")
# read index
setwd(paste0("~/Library/CloudStorage/Dropbox/1-asg/1-build/3-projects/", p, "/0-custom/domain/", d))
index = read.csv("index.csv") # from
# read embeddings
setwd(paste0("~/Library/CloudStorage/Dropbox/1-asg/1-build/3-projects/", p, "/0-custom/domain/", d))
df = read.csv ("embeddings.csv")
df$description = NULL
# create umap (dimensionality reduction algo)
df_umap = xy_umap (df)
plot (df_umap$x, df_umap$y)
text (df_umap$x, df_umap$y, df_umap$domain)
# merge to add x and y in index
index = merge (index, df_umap, by = "domain")
plot (index$x, index$y)
p = "4-eciv"
d = "submission"
# "brief.pdf" outlines the European Circular Innovation Valley (ECIV) project's sub-missions,
# focusing on developing a circular economy across various regions and sectors. It details
# fourteen specific goals to be achieved by 2029, such as increasing industrial symbiosis,
# integrating eco-design into regional plans, and reducing virgin raw material extraction.
# The text also identifies key technologies, subsectors, and fields of science relevant to each mission,
# encompassing areas like green chemistry, biotechnology, and renewable energy.
# load functions & packages
setwd("~/Library/CloudStorage/Dropbox/1-asg/1-build/2-code")
library(data.table)
library(EconGeo)
source("embedding.similarity.R")
source("xy_umap.R")
palette <- readLines("color-palette.txt")
# read index
setwd(paste0("~/Library/CloudStorage/Dropbox/1-asg/1-build/3-projects/", p, "/0-custom/domain/", d))
index = read.csv("index.csv") # from
View(index)
# read embeddings
setwd(paste0("~/Library/CloudStorage/Dropbox/1-asg/1-build/3-projects/", p, "/0-custom/domain/", d))
df = read.csv ("embeddings.csv")
df$description = NULL
# create umap (dimensionality reduction algo)
df_umap = xy_umap (df)
View(df_umap)
plot (df_umap$x, df_umap$y)
View(df_umap)
text (df_umap$x, df_umap$y, df_umap$domain)
# merge to add x and y in index
index = merge (index, df_umap, by = "domain")
plot (index$x, index$y)
View(index)
p = "4-eciv"
d = "submission"
# "brief.pdf" outlines the European Circular Innovation Valley (ECIV) project's sub-missions,
# focusing on developing a circular economy across various regions and sectors. It details
# fourteen specific goals to be achieved by 2029, such as increasing industrial symbiosis,
# integrating eco-design into regional plans, and reducing virgin raw material extraction.
# The text also identifies key technologies, subsectors, and fields of science relevant to each mission,
# encompassing areas like green chemistry, biotechnology, and renewable energy.
# load functions & packages
setwd("~/Library/CloudStorage/Dropbox/1-asg/1-build/2-code")
library(data.table)
library(EconGeo)
source("embedding.similarity.R")
source("xy_umap.R")
palette <- readLines("color-palette.txt")
# read index
setwd(paste0("~/Library/CloudStorage/Dropbox/1-asg/1-build/3-projects/", p, "/0-custom/domain/", d))
index = read.csv("index.csv") # from
# read embeddings
setwd(paste0("~/Library/CloudStorage/Dropbox/1-asg/1-build/3-projects/", p, "/0-custom/domain/", d))
df = read.csv ("embeddings.csv")
df$description = NULL
# create umap (dimensionality reduction algo)
df_umap = xy_umap (df)
plot (df_umap$x, df_umap$y)
text (df_umap$x, df_umap$y, df_umap$domain)
View(index)
# merge to add x and y in index
index = merge (index, df_umap, by = "domain")
View(index)
plot (index$x, index$y)
text (index$x, index$y, index$parent)
# add color
index$color[index$parent == "Industrial Loops"] = "#365a94"
index$color[index$parent == "Circular Models"] = "#800020"
index$color[index$parent == "Waste Cut"] = "#8cab79"
# save
setwd(paste0("~/Library/CloudStorage/Dropbox/1-asg/1-build/3-projects/", p, "/0-custom/domain/", d))
#index = index[, c("parent", "domain", "description", "color", "x", "y")]
index = index[order(index$parent, index$domain), ]
write.csv (index, "index.csv", row.names = F)
# embedding cosine similarity
df = embedding.similarity(df)
colnames (df) = c("from", "to", "score")
View(df)
p = "4-eciv"
d = "submission" # key strategic technologies
d2 = "industries"
data = "crunchbase"
# load packages & functions
setwd("~/Library/CloudStorage/Dropbox/1-asg/1-build/2-code")
library(data.table)
library(EconGeo)
source("step.classifier.wrapper.R")
source("step.classifier.R")
source("glance.classifier.R")
source("embedding.similarity.classifier.R")
source("embedding.similarity.R")
source("find.related.R")
source("rescale.R")
source("embedding.R")
source("combo.R")
# load index of custom technologies & embedding matrix of custom domains
setwd(paste0("~/Library/CloudStorage/Dropbox/1-asg/1-build/3-projects/", p, "/0-custom/domain/", d))
index1 = read.csv("index.csv")
emb1 <- fread("embeddings.csv")
# load embedding matrix of general domains
setwd(paste0("~/Dropbox/1-asg/1-build/1-data/", toupper(data), "/2-transform/", d2))
index2 = read.csv("index.csv")
emb2 <- fread("embeddings.csv")
# compute embedding similarity between custom & general domains
emb = embedding.similarity.classifier (emb1, emb2)
# glance
glance = glance.classifier(emb)
# START CLASSIFYING
df3 = NULL
# MODEL
# n = 1
index1[n,2]
glance$key[glance$domain == index1[n,2]]
# check most linguistic similar
df1 = step.classifier (check = T) # check to find kw
kw <- c("AgTech")
df1 = step.classifier (type = "main", check = F) # keep top based on regex
setwd("~/Library/CloudStorage/Dropbox/GitHub/PABalland.github.io/asg/eciv/ecosystems2")
folder <- setwd("~/Library/CloudStorage/Dropbox/GitHub/PABalland.github.io/asg/eciv/ecosystems2")
files <- list.files(folder_path, recursive = TRUE, full.names = TRUE)
folder <- setwd("~/Library/CloudStorage/Dropbox/GitHub/PABalland.github.io/asg/eciv/ecosystems2")
files <- list.files(folder, recursive = TRUE, full.names = TRUE)
setwd("~/Library/CloudStorage/Dropbox/GitHub/PABalland.github.io/asg/eciv/ecosystems2")
# Base URL
base_url <- "https://www.paballand.com/asg/eciv/ecosystems2/"
# Get all files relative to current folder (no ./ in front)
files <- list.files(path = ".", recursive = TRUE, full.names = FALSE)
# Build URLs
urls <- paste0(base_url, files)
# Write to a text file
writeLines(urls, "urls.txt")
# Preview first few
head(urls)
