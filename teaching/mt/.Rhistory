### Introduction to EconGeo
### M&T Module 6
### Pierre-Alexandre Balland
library (EconGeo)
# read the data
df = read.csv (
"https://www.paballand.com/teaching/ids/msa.sub.cat.pat.count.csv")
df = subset (df, df$dec == 2000)
df = df[, c("Cbsa.Name", "NBER.Sub.Cat.Name", "pat.count")]
colnames (df) = c("city", "tech", "patents")
df = subset (df, df$patents>5)
# transform as matrix
m = get.matrix (df)
### Introduction to EconGeo
### M&T Module 6
### Pierre-Alexandre Balland
# load EconGeo
library (EconGeo)
###
### 1. DATA STRUCTURE
###
# data structure is everything
# keep that in mind for your research in Day 2
# focus on the necessary data transformation in Day 3
# for Day 3 afternoon class you should have such a structure:
df = read.csv (
"https://www.paballand.com/teaching/ids/msa.sub.cat.pat.count.csv")
df = subset (df, df$dec == 2000)
df = df[, c("Cbsa.Name", "NBER.Sub.Cat.Name", "pat.count")]
colnames (df) = c("city", "tech", "patents")
df = subset (df, df$patents>5)
# transform as matrix
# once you are there, 80% of the work is done
m = get.matrix (df)
###
### 2. DIVERSITY/CONC INDICES
###
# EconGeo is all about that
# 2.0 Compute RCA/loc quotient
rca = RCA (m, binary = T)
results = get.list (rca)
View(results)
# 2.0 Compute RCA/loc quotient
results = RCA (m, binary = F) # pay attention to the binary argument
View(results)
results = RCA (m, binary = F) # pay attention to the binary argument
results = get.list (results)
View(results)
View(results)
# 2.1 Compute RCA/loc quotient
results = RCA (m, binary = F) # pay attention to the binary argument
results = get.list (results)
rca = RCA (m, binary = T)
View(rca)
df = subset (df, df$dec == 2000)
df = df[, c("Cbsa.Name", "NBER.Sub.Cat.Name", "pat.count")]
colnames (df) = c("city", "tech", "patents")
df = subset (df, df$patents>50) #
# transform as matrix
# once you are there, 80% of the work is done
m = get.matrix (df)
###
### 2. DIVERSITY/CONC INDICES
###
# EconGeo is all about that
# 2.1 Compute RCA/loc quotient
results = RCA (m, binary = F) # pay attention to the binary argument
results = get.list (results)
### Introduction to EconGeo
### M&T Module 6
### Pierre-Alexandre Balland
# load EconGeo
library (EconGeo)
###
### 1. DATA STRUCTURE
###
# data structure is everything
# keep that in mind for your research in Day 2
# focus on the necessary data transformation in Day 3
# for Day 3 afternoon class you should have such a structure:
df = read.csv (
"https://www.paballand.com/teaching/ids/msa.sub.cat.pat.count.csv")
df = subset (df, df$dec == 2000)
df = df[, c("Cbsa.Name", "NBER.Sub.Cat.Name", "pat.count")]
colnames (df) = c("city", "tech", "patents")
df = subset (df, df$patents>50) #
# transform as matrix
# once you are there, 80% of the work is done
m = get.matrix (df)
###
### 2. DIVERSITY/CONC INDICES
###
# EconGeo is all about that
# 2.1 Compute RCA/loc quotient
results = RCA (m, binary = F) # pay attention to the binary argument
results = get.list (results)
### Introduction to EconGeo
### M&T Module 6
### Pierre-Alexandre Balland
# load EconGeo
library (EconGeo)
###
### 1. DATA STRUCTURE
###
# data structure is everything
# keep that in mind for your research in Day 2
# focus on the necessary data transformation in Day 3
# for Day 3 afternoon class you should have such a structure:
df = read.csv (
"https://www.paballand.com/teaching/ids/msa.sub.cat.pat.count.csv")
df = subset (df, df$dec == 2000)
df = df[, c("Cbsa.Name", "NBER.Sub.Cat.Name", "pat.count")]
colnames (df) = c("city", "tech", "patents")
df = subset (df, df$patents>50) #
# transform as matrix
# once you are there, 80% of the work is done
m = get.matrix (df)
###
### 2. DIVERSITY/CONC INDICES
###
# EconGeo is all about that
# 2.1 Compute RCA/loc quotient
results = RCA (m, binary = F) # pay attention to the binary argument
results = get.list (results)
rca = RCA (m, binary = T)
# 2.2 Diversity indices
results = data.frame (city = row.names(m),
entropy = entropy (m),
Herfindahl (m),
diversity = diversity (rca))
cor (results[, 2:4])
# 2.2 Specialization indices
results = data.frame (tech = colnames(m),
entropy = entropy (t(m)),
ubiquity = ubiquity (rca),
Herfindahl (t(m)))
cor (results[, 2:4])
# 2.3 Relatedness & relatedness density
c = co.occurrence (t(rca))
r = relatedness (c)
head(r)
View(r)
# make sure compute binary RCA before computing relatedness density
rd = relatedness.density(rca, r)
View(rd)
results = data.frame (tech = colnames(m),
mort = MORt (rca),
tci = TCI (rca),
ubiquity = ubiquity (rca))
View(results)
### Introduction to EconGeo
### M&T Module 6
### Pierre-Alexandre Balland
# load EconGeo
library (EconGeo)
###
### 1. DATA STRUCTURE
###
# data structure is everything
# keep that in mind for your research in Day 2
# focus on the necessary data transformation in Day 3
# for Day 3 afternoon class you should have such a structure:
df = read.csv (
"https://www.paballand.com/teaching/ids/msa.sub.cat.pat.count.csv")
df = subset (df, df$dec == 2000)
df = df[, c("Cbsa.Name", "NBER.Sub.Cat.Name", "pat.count")]
colnames (df) = c("city", "tech", "patents")
df = subset (df, df$patents) #
# transform as matrix
# once you are there, 80% of the work is done
m = get.matrix (df)
###
### 2. DIVERSITY/CONC INDICES
###
# EconGeo is all about that
# 2.1 Compute RCA/loc quotient
results = RCA (m, binary = F) # pay attention to the binary argument
results = get.list (results)
rca = RCA (m, binary = T)
# 2.2 Diversity indices
results = data.frame (city = row.names(m),
entropy = entropy (m),
Herfindahl (m),
diversity = diversity (rca))
cor (results[, 2:4])
# 2.2 Specialization indices
results = data.frame (tech = colnames(m),
entropy = entropy (t(m)),
ubiquity = ubiquity (rca),
Herfindahl (t(m)))
cor (results[, 2:4])
# 2.3 Relatedness & relatedness density
c = co.occurrence (t(rca))
r = relatedness (c)
# make sure compute binary RCA before computing relatedness density
rd = relatedness.density(rca, r)
rd
# 2.4 Tech complexity metrics
results = data.frame (tech = colnames(m),
mort = MORt (rca),
tci = TCI (rca),
ubiquity = ubiquity (rca))
r = relatedness (c)
library (igraph)
g = graph_from_adjacency_matrix(r)
plot(g)
par(mar=c(1,1,1,1))
g = graph_from_adjacency_matrix(r)
plot(g)
head(r)
r[r<1]=0
r = relatedness (c)
library (igraph)
par(mar=c(1,1,1,1))
g = graph_from_adjacency_matrix(r[r<1]=0)
plot(g)
c = co.occurrence (t(rca))
r = relatedness (c)
library (igraph)
par(mar=c(1,1,1,1))
g = graph_from_adjacency_matrix((r[r<1]=0))
plot(g)
r = relatedness (c)
library (igraph)
par(mar=c(1,1,1,1))
r[r<1]=0
g = graph_from_adjacency_matrix(r)
plot(g)
head(r)
r[r>1]=1
g = graph_from_adjacency_matrix(r)
plot(g)
results = data.frame (tech = colnames(m),
mort = MORt (rca),
tci = TCI (rca),
ubiquity = ubiquity (rca))
View(results)
head(rca)
### Introduction to EconGeo
### M&T Module 6
### Pierre-Alexandre Balland
# load EconGeo
library (EconGeo)
###
### 1. DATA STRUCTURE
###
# data structure is everything
# keep that in mind for your research in Day 2
# focus on the necessary data transformation in Day 3
# for Day 3 afternoon class you should have such a structure:
data = read.csv (
"https://www.paballand.com/teaching/ids/msa.sub.cat.pat.count.csv")
df = subset (data, df$dec == 2000)
df = df[, c("Cbsa.Name", "NBER.Sub.Cat.Name", "pat.count")]
colnames (df) = c("city", "tech", "patents")
df = subset (df, df$patents>100) #
# transform as matrix
# once you are there, 80% of the work is done
# one of the most used feature of EconGeo is data management
m = get.matrix (df)
###
### 2. RCA/LQ
###
results = RCA (m, binary = F) # pay attention to the binary argument
results = get.list (results)
rca = RCA (m, binary = T)
###
### 3. DIVERSITY/SPECIALIZATION INDICES
###
results = data.frame (city = row.names(m),
entropy = entropy (m),
Herfindahl (m),
diversity = diversity (rca))
cor (results[, 2:4])
###
### 4. CONCENTRATION INDICES
###
results = data.frame (tech = colnames(m),
entropy = entropy (t(m)),
ubiquity = ubiquity (rca),
Herfindahl (t(m)))
cor (results[, 2:4])
###
### 5. RELATEDNESS
###
c = co.occurrence (t(rca))
r = relatedness (c)
library (igraph)
par(mar=c(1,1,1,1))
g = graph_from_adjacency_matrix(r)
plot(g)
###
### 6. RELATEDNESS DENSITY
###
rd = relatedness.density(rca, r) # make sure compute binary RCA before computing relatedness density
rd
###
### 7. COMPLEXITY METRICS
###
results = data.frame (tech = colnames(m),
mort = MORt (rca),
tci = TCI (rca),
ubiquity = ubiquity (rca))
View(results)
comp = data.frame (tech = colnames(rca),
tci = TCI (rca),
ubiquity = ubiquity (rca))
View(comp)
rd = relatedness.density(rca, r) # make sure compute binary RCA before computing relatedness density
rd = get.list (rd)
View(rd)
c = co.occurrence (t(rca))
View(c)
res = get.list (res)
res = get.list (r)
View(res)
rca = RCA (m, binary = F) # pay attention to the binary argument
rca = get.list (rca)
View(rca)
head(data)
conc = data.frame (tech = colnames(m),
entropy = entropy (t(m)),
ubiquity = ubiquity (rca),
Herfindahl (t(m)))
cor (conc[, 2:4])
rca = RCA (m, binary = F) # pay attention to the binary argument
rca = get.list (rca)
rca = RCA (m, binary = T) # will be re-used in other sections
div = data.frame (city = row.names(m),
entropy = entropy (m),
Herfindahl (m),
diversity = diversity (rca))
### Introduction to EconGeo
### M&T Module 6
### Pierre-Alexandre Balland
# load EconGeo
library (EconGeo)
###
### 1. DATA STRUCTURE
###
# data structure is everything
# keep that in mind for your research in Day 2
# focus on the necessary data transformation in Day 3
# for Day 3 afternoon class you should have such a structure:
data = read.csv (
"https://www.paballand.com/teaching/ids/msa.sub.cat.pat.count.csv")
# don't change large datasets
# create another object instead
df = subset (data, df$dec == 2000)
df = df[, c("Cbsa.Name", "NBER.Sub.Cat.Name", "pat.count")]
colnames (df) = c("city", "tech", "patents")
df = subset (df, df$patents>100) #
# transform as matrix
# once you are there, 80% of the work is done
# one of the most used feature of EconGeo is data management
m = get.matrix (df)
###
### 2. RCA/LQ
###
rca = RCA (m, binary = F) # pay attention to the binary argument
rca = get.list (rca)
rca = RCA (m, binary = T) # will be re-used in other sections
###
### 3. DIVERSITY/SPECIALIZATION INDICES
###
div = data.frame (city = row.names(m),
entropy = entropy (m),
Herfindahl (m),
diversity = diversity (rca))
cor (div[, 2:4])
###
### 4. CONCENTRATION INDICES
###
conc = data.frame (tech = colnames(m),
entropy = entropy (t(m)),
ubiquity = ubiquity (rca),
Herfindahl (t(m)))
cor (conc[, 2:4])
###
### 5. RELATEDNESS
###
c = co.occurrence (t(rca)) # size matters
r = relatedness (c) # normalize for size
res = get.list (r)
# viz
#library (igraph)
#g = graph_from_adjacency_matrix(r)
#plot(g)
###
### 6. RELATEDNESS DENSITY
###
rd = relatedness.density(rca, r) # make sure compute binary RCA before computing relatedness density
rd = get.list (rd)
###
### 7. COMPLEXITY METRICS
###
comp = data.frame (tech = colnames(rca),
tci = TCI (rca),
ubiquity = ubiquity (rca))
df = subset (data, data$dec == 2000)
df = df[, c("Cbsa.Name", "NBER.Sub.Cat.Name", "pat.count")]
colnames (df) = c("city", "tech", "patents")
df = subset (df, df$patents>100) #
# transform as matrix
# once you are there, 80% of the work is done
# one of the most used feature of EconGeo is data management
m = get.matrix (df)
###
### 2. RCA/LQ
###
rca = RCA (m, binary = F) # pay attention to the binary argument
rca = get.list (rca)
rca = RCA (m, binary = T) # will be re-used in other sections
###
### 3. DIVERSITY/SPECIALIZATION INDICES
###
div = data.frame (city = row.names(m),
entropy = entropy (m),
Herfindahl (m),
diversity = diversity (rca))
cor (div[, 2:4])
###
### 4. CONCENTRATION INDICES
###
conc = data.frame (tech = colnames(m),
entropy = entropy (t(m)),
ubiquity = ubiquity (rca),
Herfindahl (t(m)))
cor (conc[, 2:4])
###
### 5. RELATEDNESS
###
c = co.occurrence (t(rca)) # size matters
r = relatedness (c) # normalize for size
res = get.list (r)
# viz
#library (igraph)
#g = graph_from_adjacency_matrix(r)
#plot(g)
###
### 6. RELATEDNESS DENSITY
###
rd = relatedness.density(rca, r) # make sure compute binary RCA before computing relatedness density
rd = get.list (rd)
###
### 7. COMPLEXITY METRICS
###
comp = data.frame (tech = colnames(rca),
tci = TCI (rca),
ubiquity = ubiquity (rca))
# load EconGeo
library (EconGeo)
data = read.csv (
"https://www.paballand.com/teaching/ids/msa.sub.cat.pat.count.csv")
df = subset (data, data$dec == 2000)
df = subset (data, data$dec == 2000)
df = df[, c("Cbsa.Name", "NBER.Sub.Cat.Name", "pat.count")]
colnames (df) = c("city", "tech", "patents")
df = subset (df, df$patents>100) #
head(df)
# transform as matrix
# once you are there, 80% of the work is done
# one of the most used feature of EconGeo is data management
m = get.matrix (df)
m[1:5, 1:5]
View(m)
rca = RCA (m, binary = F) # pay attention to the binary argument
View(rca)
?RCA
RCA
mat/rowSums(mat)
m/rowSums(m)
RCA
rca = RCA (m, binary = T) # will be re-used in other sections
?entropy
div = data.frame (city = row.names(m),
entropy = entropy (m),
Herfindahl (m),
diversity = diversity (rca))
cor (div[, 2:4])
View(div)
entropy
conc = data.frame (tech = colnames(m),
entropy = entropy (t(m)),
ubiquity = ubiquity (rca),
Herfindahl (t(m)))
View(conc)
cor (conc[, 2:4])
c = co.occurrence (t(rca)) # size matters
View(c)
r = relatedness (c) # normalize for size
res = get.list (r)
View(res)
rd = relatedness.density(rca, r) # make sure compute binary RCA before computing relatedness density
rd = get.list (rd)
View(rd)
head(rca)
comp = data.frame (tech = colnames(rca),
tci = TCI (rca),
ubiquity = ubiquity (rca))
View(comp)
?TCI
